// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aesm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aesm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aesm {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_InitQuoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_InitQuoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetQuoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetQuoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetLaunchTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetLaunchTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ReportAttestationErrorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ReportAttestationErrorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_CreateSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_CreateSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_InvokeServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_InvokeServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ExchangeReportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ExchangeReportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_CloseSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_CloseSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetPsCapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetPsCapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetWhiteListSizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetWhiteListSizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetWhiteListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetWhiteListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_SGXGetExtendedEpidGroupIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_SGXGetExtendedEpidGroupIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_SGXSwitchExtendedEpidGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_SGXSwitchExtendedEpidGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_SGXRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_SGXRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_InitQuoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_InitQuoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetQuoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetQuoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetLaunchTokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetLaunchTokenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ReportAttestationErrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ReportAttestationErrorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_CreateSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_CreateSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_InvokeServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_InvokeServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ExchangeReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ExchangeReportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_CloseSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_CloseSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetPsCapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetPsCapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetWhiteListSizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetWhiteListSizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetWhiteListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetWhiteListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SGXGetExtendedEpidGroupIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SGXGetExtendedEpidGroupIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SGXSwitchExtendedEpidGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SGXSwitchExtendedEpidGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SGXRegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SGXRegisterResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_aesm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_aesm_2eproto() {
  protobuf_AddDesc_aesm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aesm.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, initquotereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getquotereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getlictokenreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, reporterrreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, createsessionreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, invokeservicereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, exchangereportreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, closesessionreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getpscapreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getwhitelistsizereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getwhitelistreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sgxgetextendedepidgroupidreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sgxswitchextendedepidgroupreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sgxregisterreq_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Request_InitQuoteRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_InitQuoteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteRequest, timeout_),
  };
  Request_InitQuoteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_InitQuoteRequest_descriptor_,
      Request_InitQuoteRequest::default_instance_,
      Request_InitQuoteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_InitQuoteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteRequest, _internal_metadata_),
      -1);
  Request_GetQuoteRequest_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_GetQuoteRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, quote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, spid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, sig_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, buf_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, qe_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, timeout_),
  };
  Request_GetQuoteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_GetQuoteRequest_descriptor_,
      Request_GetQuoteRequest::default_instance_,
      Request_GetQuoteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_GetQuoteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, _internal_metadata_),
      -1);
  Request_GetLaunchTokenRequest_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_GetLaunchTokenRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, mr_enclave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, mr_signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, se_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, timeout_),
  };
  Request_GetLaunchTokenRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_GetLaunchTokenRequest_descriptor_,
      Request_GetLaunchTokenRequest::default_instance_,
      Request_GetLaunchTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_GetLaunchTokenRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, _internal_metadata_),
      -1);
  Request_ReportAttestationErrorRequest_descriptor_ = Request_descriptor_->nested_type(3);
  static const int Request_ReportAttestationErrorRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, platform_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, attestation_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, update_info_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, timeout_),
  };
  Request_ReportAttestationErrorRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_ReportAttestationErrorRequest_descriptor_,
      Request_ReportAttestationErrorRequest::default_instance_,
      Request_ReportAttestationErrorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_ReportAttestationErrorRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, _internal_metadata_),
      -1);
  Request_CreateSessionRequest_descriptor_ = Request_descriptor_->nested_type(4);
  static const int Request_CreateSessionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, dh_msg1_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, timeout_),
  };
  Request_CreateSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_CreateSessionRequest_descriptor_,
      Request_CreateSessionRequest::default_instance_,
      Request_CreateSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_CreateSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, _internal_metadata_),
      -1);
  Request_InvokeServiceRequest_descriptor_ = Request_descriptor_->nested_type(5);
  static const int Request_InvokeServiceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, pse_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, pse_resp_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, timeout_),
  };
  Request_InvokeServiceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_InvokeServiceRequest_descriptor_,
      Request_InvokeServiceRequest::default_instance_,
      Request_InvokeServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_InvokeServiceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, _internal_metadata_),
      -1);
  Request_ExchangeReportRequest_descriptor_ = Request_descriptor_->nested_type(6);
  static const int Request_ExchangeReportRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, se_dh_msg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, se_dh_msg3_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, timeout_),
  };
  Request_ExchangeReportRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_ExchangeReportRequest_descriptor_,
      Request_ExchangeReportRequest::default_instance_,
      Request_ExchangeReportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_ExchangeReportRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, _internal_metadata_),
      -1);
  Request_CloseSessionRequest_descriptor_ = Request_descriptor_->nested_type(7);
  static const int Request_CloseSessionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, timeout_),
  };
  Request_CloseSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_CloseSessionRequest_descriptor_,
      Request_CloseSessionRequest::default_instance_,
      Request_CloseSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_CloseSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, _internal_metadata_),
      -1);
  Request_GetPsCapRequest_descriptor_ = Request_descriptor_->nested_type(8);
  static const int Request_GetPsCapRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetPsCapRequest, timeout_),
  };
  Request_GetPsCapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_GetPsCapRequest_descriptor_,
      Request_GetPsCapRequest::default_instance_,
      Request_GetPsCapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetPsCapRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_GetPsCapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetPsCapRequest, _internal_metadata_),
      -1);
  Request_GetWhiteListSizeRequest_descriptor_ = Request_descriptor_->nested_type(9);
  static const int Request_GetWhiteListSizeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListSizeRequest, timeout_),
  };
  Request_GetWhiteListSizeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_GetWhiteListSizeRequest_descriptor_,
      Request_GetWhiteListSizeRequest::default_instance_,
      Request_GetWhiteListSizeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListSizeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_GetWhiteListSizeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListSizeRequest, _internal_metadata_),
      -1);
  Request_GetWhiteListRequest_descriptor_ = Request_descriptor_->nested_type(10);
  static const int Request_GetWhiteListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, white_list_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, timeout_),
  };
  Request_GetWhiteListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_GetWhiteListRequest_descriptor_,
      Request_GetWhiteListRequest::default_instance_,
      Request_GetWhiteListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_GetWhiteListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, _internal_metadata_),
      -1);
  Request_SGXGetExtendedEpidGroupIdRequest_descriptor_ = Request_descriptor_->nested_type(11);
  static const int Request_SGXGetExtendedEpidGroupIdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXGetExtendedEpidGroupIdRequest, timeout_),
  };
  Request_SGXGetExtendedEpidGroupIdRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_SGXGetExtendedEpidGroupIdRequest_descriptor_,
      Request_SGXGetExtendedEpidGroupIdRequest::default_instance_,
      Request_SGXGetExtendedEpidGroupIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXGetExtendedEpidGroupIdRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_SGXGetExtendedEpidGroupIdRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXGetExtendedEpidGroupIdRequest, _internal_metadata_),
      -1);
  Request_SGXSwitchExtendedEpidGroupRequest_descriptor_ = Request_descriptor_->nested_type(12);
  static const int Request_SGXSwitchExtendedEpidGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, x_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, timeout_),
  };
  Request_SGXSwitchExtendedEpidGroupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_SGXSwitchExtendedEpidGroupRequest_descriptor_,
      Request_SGXSwitchExtendedEpidGroupRequest::default_instance_,
      Request_SGXSwitchExtendedEpidGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_SGXSwitchExtendedEpidGroupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, _internal_metadata_),
      -1);
  Request_SGXRegisterRequest_descriptor_ = Request_descriptor_->nested_type(13);
  static const int Request_SGXRegisterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, timeout_),
  };
  Request_SGXRegisterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_SGXRegisterRequest_descriptor_,
      Request_SGXRegisterRequest::default_instance_,
      Request_SGXRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_SGXRegisterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, initquoteres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getquoteres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getlictokenres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, reporterrres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, createsessionres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, invokeserviceres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, exchangereportres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, closesessionres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getpscapres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getwhitelistsizeres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getwhitelistres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sgxgetextendedepidgroupidres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sgxswitchextendedepidgroupres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sgxregisterres_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  Response_InitQuoteResponse_descriptor_ = Response_descriptor_->nested_type(0);
  static const int Response_InitQuoteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, targetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, gid_),
  };
  Response_InitQuoteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_InitQuoteResponse_descriptor_,
      Response_InitQuoteResponse::default_instance_,
      Response_InitQuoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_InitQuoteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, _internal_metadata_),
      -1);
  Response_GetQuoteResponse_descriptor_ = Response_descriptor_->nested_type(1);
  static const int Response_GetQuoteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, quote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, qe_report_),
  };
  Response_GetQuoteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_GetQuoteResponse_descriptor_,
      Response_GetQuoteResponse::default_instance_,
      Response_GetQuoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_GetQuoteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, _internal_metadata_),
      -1);
  Response_GetLaunchTokenResponse_descriptor_ = Response_descriptor_->nested_type(2);
  static const int Response_GetLaunchTokenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, token_),
  };
  Response_GetLaunchTokenResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_GetLaunchTokenResponse_descriptor_,
      Response_GetLaunchTokenResponse::default_instance_,
      Response_GetLaunchTokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_GetLaunchTokenResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, _internal_metadata_),
      -1);
  Response_ReportAttestationErrorResponse_descriptor_ = Response_descriptor_->nested_type(3);
  static const int Response_ReportAttestationErrorResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, platform_update_info_),
  };
  Response_ReportAttestationErrorResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_ReportAttestationErrorResponse_descriptor_,
      Response_ReportAttestationErrorResponse::default_instance_,
      Response_ReportAttestationErrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_ReportAttestationErrorResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, _internal_metadata_),
      -1);
  Response_CreateSessionResponse_descriptor_ = Response_descriptor_->nested_type(4);
  static const int Response_CreateSessionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, se_dh_msg1_),
  };
  Response_CreateSessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_CreateSessionResponse_descriptor_,
      Response_CreateSessionResponse::default_instance_,
      Response_CreateSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_CreateSessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, _internal_metadata_),
      -1);
  Response_InvokeServiceResponse_descriptor_ = Response_descriptor_->nested_type(5);
  static const int Response_InvokeServiceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, pse_message_),
  };
  Response_InvokeServiceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_InvokeServiceResponse_descriptor_,
      Response_InvokeServiceResponse::default_instance_,
      Response_InvokeServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_InvokeServiceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, _internal_metadata_),
      -1);
  Response_ExchangeReportResponse_descriptor_ = Response_descriptor_->nested_type(6);
  static const int Response_ExchangeReportResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, se_dh_msg3_),
  };
  Response_ExchangeReportResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_ExchangeReportResponse_descriptor_,
      Response_ExchangeReportResponse::default_instance_,
      Response_ExchangeReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_ExchangeReportResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, _internal_metadata_),
      -1);
  Response_CloseSessionResponse_descriptor_ = Response_descriptor_->nested_type(7);
  static const int Response_CloseSessionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CloseSessionResponse, errorcode_),
  };
  Response_CloseSessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_CloseSessionResponse_descriptor_,
      Response_CloseSessionResponse::default_instance_,
      Response_CloseSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CloseSessionResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_CloseSessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CloseSessionResponse, _internal_metadata_),
      -1);
  Response_GetPsCapResponse_descriptor_ = Response_descriptor_->nested_type(8);
  static const int Response_GetPsCapResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, ps_cap_),
  };
  Response_GetPsCapResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_GetPsCapResponse_descriptor_,
      Response_GetPsCapResponse::default_instance_,
      Response_GetPsCapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_GetPsCapResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, _internal_metadata_),
      -1);
  Response_GetWhiteListSizeResponse_descriptor_ = Response_descriptor_->nested_type(9);
  static const int Response_GetWhiteListSizeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, white_list_size_),
  };
  Response_GetWhiteListSizeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_GetWhiteListSizeResponse_descriptor_,
      Response_GetWhiteListSizeResponse::default_instance_,
      Response_GetWhiteListSizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_GetWhiteListSizeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, _internal_metadata_),
      -1);
  Response_GetWhiteListResponse_descriptor_ = Response_descriptor_->nested_type(10);
  static const int Response_GetWhiteListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, white_list_),
  };
  Response_GetWhiteListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_GetWhiteListResponse_descriptor_,
      Response_GetWhiteListResponse::default_instance_,
      Response_GetWhiteListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_GetWhiteListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, _internal_metadata_),
      -1);
  Response_SGXGetExtendedEpidGroupIdResponse_descriptor_ = Response_descriptor_->nested_type(11);
  static const int Response_SGXGetExtendedEpidGroupIdResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, x_group_id_),
  };
  Response_SGXGetExtendedEpidGroupIdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_SGXGetExtendedEpidGroupIdResponse_descriptor_,
      Response_SGXGetExtendedEpidGroupIdResponse::default_instance_,
      Response_SGXGetExtendedEpidGroupIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_SGXGetExtendedEpidGroupIdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, _internal_metadata_),
      -1);
  Response_SGXSwitchExtendedEpidGroupResponse_descriptor_ = Response_descriptor_->nested_type(12);
  static const int Response_SGXSwitchExtendedEpidGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXSwitchExtendedEpidGroupResponse, errorcode_),
  };
  Response_SGXSwitchExtendedEpidGroupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_SGXSwitchExtendedEpidGroupResponse_descriptor_,
      Response_SGXSwitchExtendedEpidGroupResponse::default_instance_,
      Response_SGXSwitchExtendedEpidGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXSwitchExtendedEpidGroupResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_SGXSwitchExtendedEpidGroupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXSwitchExtendedEpidGroupResponse, _internal_metadata_),
      -1);
  Response_SGXRegisterResponse_descriptor_ = Response_descriptor_->nested_type(13);
  static const int Response_SGXRegisterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXRegisterResponse, errorcode_),
  };
  Response_SGXRegisterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_SGXRegisterResponse_descriptor_,
      Response_SGXRegisterResponse::default_instance_,
      Response_SGXRegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXRegisterResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response_SGXRegisterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXRegisterResponse, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aesm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_InitQuoteRequest_descriptor_, &Request_InitQuoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_GetQuoteRequest_descriptor_, &Request_GetQuoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_GetLaunchTokenRequest_descriptor_, &Request_GetLaunchTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_ReportAttestationErrorRequest_descriptor_, &Request_ReportAttestationErrorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_CreateSessionRequest_descriptor_, &Request_CreateSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_InvokeServiceRequest_descriptor_, &Request_InvokeServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_ExchangeReportRequest_descriptor_, &Request_ExchangeReportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_CloseSessionRequest_descriptor_, &Request_CloseSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_GetPsCapRequest_descriptor_, &Request_GetPsCapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_GetWhiteListSizeRequest_descriptor_, &Request_GetWhiteListSizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_GetWhiteListRequest_descriptor_, &Request_GetWhiteListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_SGXGetExtendedEpidGroupIdRequest_descriptor_, &Request_SGXGetExtendedEpidGroupIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_SGXSwitchExtendedEpidGroupRequest_descriptor_, &Request_SGXSwitchExtendedEpidGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_SGXRegisterRequest_descriptor_, &Request_SGXRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_InitQuoteResponse_descriptor_, &Response_InitQuoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_GetQuoteResponse_descriptor_, &Response_GetQuoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_GetLaunchTokenResponse_descriptor_, &Response_GetLaunchTokenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_ReportAttestationErrorResponse_descriptor_, &Response_ReportAttestationErrorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_CreateSessionResponse_descriptor_, &Response_CreateSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_InvokeServiceResponse_descriptor_, &Response_InvokeServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_ExchangeReportResponse_descriptor_, &Response_ExchangeReportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_CloseSessionResponse_descriptor_, &Response_CloseSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_GetPsCapResponse_descriptor_, &Response_GetPsCapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_GetWhiteListSizeResponse_descriptor_, &Response_GetWhiteListSizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_GetWhiteListResponse_descriptor_, &Response_GetWhiteListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_SGXGetExtendedEpidGroupIdResponse_descriptor_, &Response_SGXGetExtendedEpidGroupIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_SGXSwitchExtendedEpidGroupResponse_descriptor_, &Response_SGXSwitchExtendedEpidGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_SGXRegisterResponse_descriptor_, &Response_SGXRegisterResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aesm_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_InitQuoteRequest::default_instance_;
  delete Request_InitQuoteRequest_reflection_;
  delete Request_GetQuoteRequest::default_instance_;
  delete Request_GetQuoteRequest_reflection_;
  delete Request_GetLaunchTokenRequest::default_instance_;
  delete Request_GetLaunchTokenRequest_reflection_;
  delete Request_ReportAttestationErrorRequest::default_instance_;
  delete Request_ReportAttestationErrorRequest_reflection_;
  delete Request_CreateSessionRequest::default_instance_;
  delete Request_CreateSessionRequest_reflection_;
  delete Request_InvokeServiceRequest::default_instance_;
  delete Request_InvokeServiceRequest_reflection_;
  delete Request_ExchangeReportRequest::default_instance_;
  delete Request_ExchangeReportRequest_reflection_;
  delete Request_CloseSessionRequest::default_instance_;
  delete Request_CloseSessionRequest_reflection_;
  delete Request_GetPsCapRequest::default_instance_;
  delete Request_GetPsCapRequest_reflection_;
  delete Request_GetWhiteListSizeRequest::default_instance_;
  delete Request_GetWhiteListSizeRequest_reflection_;
  delete Request_GetWhiteListRequest::default_instance_;
  delete Request_GetWhiteListRequest_reflection_;
  delete Request_SGXGetExtendedEpidGroupIdRequest::default_instance_;
  delete Request_SGXGetExtendedEpidGroupIdRequest_reflection_;
  delete Request_SGXSwitchExtendedEpidGroupRequest::default_instance_;
  delete Request_SGXSwitchExtendedEpidGroupRequest_reflection_;
  delete Request_SGXRegisterRequest::default_instance_;
  delete Request_SGXRegisterRequest_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Response_InitQuoteResponse::default_instance_;
  delete Response_InitQuoteResponse_reflection_;
  delete Response_GetQuoteResponse::default_instance_;
  delete Response_GetQuoteResponse_reflection_;
  delete Response_GetLaunchTokenResponse::default_instance_;
  delete Response_GetLaunchTokenResponse_reflection_;
  delete Response_ReportAttestationErrorResponse::default_instance_;
  delete Response_ReportAttestationErrorResponse_reflection_;
  delete Response_CreateSessionResponse::default_instance_;
  delete Response_CreateSessionResponse_reflection_;
  delete Response_InvokeServiceResponse::default_instance_;
  delete Response_InvokeServiceResponse_reflection_;
  delete Response_ExchangeReportResponse::default_instance_;
  delete Response_ExchangeReportResponse_reflection_;
  delete Response_CloseSessionResponse::default_instance_;
  delete Response_CloseSessionResponse_reflection_;
  delete Response_GetPsCapResponse::default_instance_;
  delete Response_GetPsCapResponse_reflection_;
  delete Response_GetWhiteListSizeResponse::default_instance_;
  delete Response_GetWhiteListSizeResponse_reflection_;
  delete Response_GetWhiteListResponse::default_instance_;
  delete Response_GetWhiteListResponse_reflection_;
  delete Response_SGXGetExtendedEpidGroupIdResponse::default_instance_;
  delete Response_SGXGetExtendedEpidGroupIdResponse_reflection_;
  delete Response_SGXSwitchExtendedEpidGroupResponse::default_instance_;
  delete Response_SGXSwitchExtendedEpidGroupResponse_reflection_;
  delete Response_SGXRegisterResponse::default_instance_;
  delete Response_SGXRegisterResponse_reflection_;
}

void protobuf_AddDesc_aesm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_aesm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\naesm.proto\022\014aesm.message\"\265\020\n\007Request\022<"
    "\n\014initQuoteReq\030\001 \001(\0132&.aesm.message.Requ"
    "est.InitQuoteRequest\022:\n\013getQuoteReq\030\002 \001("
    "\0132%.aesm.message.Request.GetQuoteRequest"
    "\022C\n\016getLicTokenReq\030\003 \001(\0132+.aesm.message."
    "Request.GetLaunchTokenRequest\022I\n\014reportE"
    "rrReq\030\004 \001(\01323.aesm.message.Request.Repor"
    "tAttestationErrorRequest\022D\n\020createSessio"
    "nReq\030\005 \001(\0132*.aesm.message.Request.Create"
    "SessionRequest\022D\n\020invokeServiceReq\030\006 \001(\013"
    "2*.aesm.message.Request.InvokeServiceReq"
    "uest\022F\n\021exchangeReportReq\030\007 \001(\0132+.aesm.m"
    "essage.Request.ExchangeReportRequest\022B\n\017"
    "closeSessionReq\030\010 \001(\0132).aesm.message.Req"
    "uest.CloseSessionRequest\022:\n\013getPsCapReq\030"
    "\t \001(\0132%.aesm.message.Request.GetPsCapReq"
    "uest\022J\n\023getWhiteListSizeReq\030\n \001(\0132-.aesm"
    ".message.Request.GetWhiteListSizeRequest"
    "\022B\n\017getWhiteListReq\030\013 \001(\0132).aesm.message"
    ".Request.GetWhiteListRequest\022\\\n\034sgxGetEx"
    "tendedEpidGroupIdReq\030\014 \001(\01326.aesm.messag"
    "e.Request.SGXGetExtendedEpidGroupIdReque"
    "st\022^\n\035sgxSwitchExtendedEpidGroupReq\030\r \001("
    "\01327.aesm.message.Request.SGXSwitchExtend"
    "edEpidGroupRequest\022@\n\016sgxRegisterReq\030\016 \001"
    "(\0132(.aesm.message.Request.SGXRegisterReq"
    "uest\032#\n\020InitQuoteRequest\022\017\n\007timeout\030\t \001("
    "\r\032\230\001\n\017GetQuoteRequest\022\016\n\006report\030\001 \002(\014\022\022\n"
    "\nquote_type\030\002 \002(\r\022\014\n\004spid\030\003 \002(\014\022\r\n\005nonce"
    "\030\004 \001(\014\022\016\n\006sig_rl\030\005 \001(\014\022\020\n\010buf_size\030\006 \002(\r"
    "\022\021\n\tqe_report\030\007 \001(\010\022\017\n\007timeout\030\t \001(\r\032f\n\025"
    "GetLaunchTokenRequest\022\022\n\nmr_enclave\030\001 \002("
    "\014\022\021\n\tmr_signer\030\002 \002(\014\022\025\n\rse_attributes\030\003 "
    "\002(\014\022\017\n\007timeout\030\t \001(\r\032\201\001\n\035ReportAttestati"
    "onErrorRequest\022\025\n\rplatform_info\030\001 \002(\014\022\036\n"
    "\026attestation_error_code\030\002 \002(\r\022\030\n\020update_"
    "info_size\030\003 \002(\r\022\017\n\007timeout\030\t \001(\r\032=\n\024Crea"
    "teSessionRequest\022\024\n\014dh_msg1_size\030\001 \002(\r\022\017"
    "\n\007timeout\030\t \001(\r\032S\n\024InvokeServiceRequest\022"
    "\023\n\013pse_message\030\001 \002(\014\022\025\n\rpse_resp_size\030\002 "
    "\002(\r\022\017\n\007timeout\030\t \001(\r\032i\n\025ExchangeReportRe"
    "quest\022\022\n\nsession_id\030\001 \002(\r\022\022\n\nse_dh_msg2\030"
    "\002 \002(\014\022\027\n\017se_dh_msg3_size\030\003 \002(\r\022\017\n\007timeou"
    "t\030\t \001(\r\032:\n\023CloseSessionRequest\022\022\n\nsessio"
    "n_id\030\001 \002(\r\022\017\n\007timeout\030\t \001(\r\032\"\n\017GetPsCapR"
    "equest\022\017\n\007timeout\030\t \001(\r\032*\n\027GetWhiteListS"
    "izeRequest\022\017\n\007timeout\030\t \001(\r\032\?\n\023GetWhiteL"
    "istRequest\022\027\n\017white_list_size\030\001 \001(\r\022\017\n\007t"
    "imeout\030\t \001(\r\0323\n SGXGetExtendedEpidGroupI"
    "dRequest\022\017\n\007timeout\030\t \001(\r\032H\n!SGXSwitchEx"
    "tendedEpidGroupRequest\022\022\n\nx_group_id\030\001 \001"
    "(\r\022\017\n\007timeout\030\t \001(\r\032E\n\022SGXRegisterReques"
    "t\022\013\n\003buf\030\001 \002(\014\022\021\n\tdata_type\030\002 \002(\r\022\017\n\007tim"
    "eout\030\t \001(\r\"\315\017\n\010Response\022>\n\014initQuoteRes\030"
    "\001 \001(\0132(.aesm.message.Response.InitQuoteR"
    "esponse\022<\n\013getQuoteRes\030\002 \001(\0132\'.aesm.mess"
    "age.Response.GetQuoteResponse\022E\n\016getLicT"
    "okenRes\030\003 \001(\0132-.aesm.message.Response.Ge"
    "tLaunchTokenResponse\022K\n\014reportErrRes\030\004 \001"
    "(\01325.aesm.message.Response.ReportAttesta"
    "tionErrorResponse\022F\n\020createSessionRes\030\005 "
    "\001(\0132,.aesm.message.Response.CreateSessio"
    "nResponse\022F\n\020invokeServiceRes\030\006 \001(\0132,.ae"
    "sm.message.Response.InvokeServiceRespons"
    "e\022H\n\021exchangeReportRes\030\007 \001(\0132-.aesm.mess"
    "age.Response.ExchangeReportResponse\022D\n\017c"
    "loseSessionRes\030\010 \001(\0132+.aesm.message.Resp"
    "onse.CloseSessionResponse\022<\n\013getPsCapRes"
    "\030\t \001(\0132\'.aesm.message.Response.GetPsCapR"
    "esponse\022L\n\023getWhiteListSizeRes\030\n \001(\0132/.a"
    "esm.message.Response.GetWhiteListSizeRes"
    "ponse\022D\n\017getWhiteListRes\030\013 \001(\0132+.aesm.me"
    "ssage.Response.GetWhiteListResponse\022^\n\034s"
    "gxGetExtendedEpidGroupIdRes\030\014 \001(\01328.aesm"
    ".message.Response.SGXGetExtendedEpidGrou"
    "pIdResponse\022`\n\035sgxSwitchExtendedEpidGrou"
    "pRes\030\r \001(\01329.aesm.message.Response.SGXSw"
    "itchExtendedEpidGroupResponse\022B\n\016sgxRegi"
    "sterRes\030\016 \001(\0132*.aesm.message.Response.SG"
    "XRegisterResponse\032J\n\021InitQuoteResponse\022\024"
    "\n\terrorCode\030\001 \002(\r:\0011\022\022\n\ntargetInfo\030\002 \001(\014"
    "\022\013\n\003gid\030\003 \001(\014\032J\n\020GetQuoteResponse\022\024\n\terr"
    "orCode\030\001 \002(\r:\0011\022\r\n\005quote\030\002 \001(\014\022\021\n\tqe_rep"
    "ort\030\003 \001(\014\032=\n\026GetLaunchTokenResponse\022\024\n\te"
    "rrorCode\030\001 \002(\r:\0011\022\r\n\005token\030\002 \001(\014\032T\n\036Repo"
    "rtAttestationErrorResponse\022\024\n\terrorCode\030"
    "\001 \002(\r:\0011\022\034\n\024platform_update_info\030\002 \001(\014\032U"
    "\n\025CreateSessionResponse\022\024\n\terrorCode\030\001 \002"
    "(\r:\0011\022\022\n\nsession_id\030\002 \001(\r\022\022\n\nse_dh_msg1\030"
    "\003 \001(\014\032B\n\025InvokeServiceResponse\022\024\n\terrorC"
    "ode\030\001 \002(\r:\0011\022\023\n\013pse_message\030\002 \001(\014\032B\n\026Exc"
    "hangeReportResponse\022\024\n\terrorCode\030\001 \002(\r:\001"
    "1\022\022\n\nse_dh_msg3\030\002 \001(\014\032,\n\024CloseSessionRes"
    "ponse\022\024\n\terrorCode\030\001 \002(\r:\0011\0328\n\020GetPsCapR"
    "esponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\016\n\006ps_cap\030"
    "\002 \001(\004\032I\n\030GetWhiteListSizeResponse\022\024\n\terr"
    "orCode\030\001 \002(\r:\0011\022\027\n\017white_list_size\030\002 \001(\r"
    "\032@\n\024GetWhiteListResponse\022\024\n\terrorCode\030\001 "
    "\002(\r:\0011\022\022\n\nwhite_list\030\002 \001(\014\032M\n!SGXGetExte"
    "ndedEpidGroupIdResponse\022\024\n\terrorCode\030\001 \002"
    "(\r:\0011\022\022\n\nx_group_id\030\002 \001(\r\032:\n\"SGXSwitchEx"
    "tendedEpidGroupResponse\022\024\n\terrorCode\030\001 \002"
    "(\r:\0011\032+\n\023SGXRegisterResponse\022\024\n\terrorCod"
    "e\030\001 \002(\r:\0011", 4130);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aesm.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_InitQuoteRequest::default_instance_ = new Request_InitQuoteRequest();
  Request_GetQuoteRequest::default_instance_ = new Request_GetQuoteRequest();
  Request_GetLaunchTokenRequest::default_instance_ = new Request_GetLaunchTokenRequest();
  Request_ReportAttestationErrorRequest::default_instance_ = new Request_ReportAttestationErrorRequest();
  Request_CreateSessionRequest::default_instance_ = new Request_CreateSessionRequest();
  Request_InvokeServiceRequest::default_instance_ = new Request_InvokeServiceRequest();
  Request_ExchangeReportRequest::default_instance_ = new Request_ExchangeReportRequest();
  Request_CloseSessionRequest::default_instance_ = new Request_CloseSessionRequest();
  Request_GetPsCapRequest::default_instance_ = new Request_GetPsCapRequest();
  Request_GetWhiteListSizeRequest::default_instance_ = new Request_GetWhiteListSizeRequest();
  Request_GetWhiteListRequest::default_instance_ = new Request_GetWhiteListRequest();
  Request_SGXGetExtendedEpidGroupIdRequest::default_instance_ = new Request_SGXGetExtendedEpidGroupIdRequest();
  Request_SGXSwitchExtendedEpidGroupRequest::default_instance_ = new Request_SGXSwitchExtendedEpidGroupRequest();
  Request_SGXRegisterRequest::default_instance_ = new Request_SGXRegisterRequest();
  Response::default_instance_ = new Response();
  Response_InitQuoteResponse::default_instance_ = new Response_InitQuoteResponse();
  Response_GetQuoteResponse::default_instance_ = new Response_GetQuoteResponse();
  Response_GetLaunchTokenResponse::default_instance_ = new Response_GetLaunchTokenResponse();
  Response_ReportAttestationErrorResponse::default_instance_ = new Response_ReportAttestationErrorResponse();
  Response_CreateSessionResponse::default_instance_ = new Response_CreateSessionResponse();
  Response_InvokeServiceResponse::default_instance_ = new Response_InvokeServiceResponse();
  Response_ExchangeReportResponse::default_instance_ = new Response_ExchangeReportResponse();
  Response_CloseSessionResponse::default_instance_ = new Response_CloseSessionResponse();
  Response_GetPsCapResponse::default_instance_ = new Response_GetPsCapResponse();
  Response_GetWhiteListSizeResponse::default_instance_ = new Response_GetWhiteListSizeResponse();
  Response_GetWhiteListResponse::default_instance_ = new Response_GetWhiteListResponse();
  Response_SGXGetExtendedEpidGroupIdResponse::default_instance_ = new Response_SGXGetExtendedEpidGroupIdResponse();
  Response_SGXSwitchExtendedEpidGroupResponse::default_instance_ = new Response_SGXSwitchExtendedEpidGroupResponse();
  Response_SGXRegisterResponse::default_instance_ = new Response_SGXRegisterResponse();
  Request::default_instance_->InitAsDefaultInstance();
  Request_InitQuoteRequest::default_instance_->InitAsDefaultInstance();
  Request_GetQuoteRequest::default_instance_->InitAsDefaultInstance();
  Request_GetLaunchTokenRequest::default_instance_->InitAsDefaultInstance();
  Request_ReportAttestationErrorRequest::default_instance_->InitAsDefaultInstance();
  Request_CreateSessionRequest::default_instance_->InitAsDefaultInstance();
  Request_InvokeServiceRequest::default_instance_->InitAsDefaultInstance();
  Request_ExchangeReportRequest::default_instance_->InitAsDefaultInstance();
  Request_CloseSessionRequest::default_instance_->InitAsDefaultInstance();
  Request_GetPsCapRequest::default_instance_->InitAsDefaultInstance();
  Request_GetWhiteListSizeRequest::default_instance_->InitAsDefaultInstance();
  Request_GetWhiteListRequest::default_instance_->InitAsDefaultInstance();
  Request_SGXGetExtendedEpidGroupIdRequest::default_instance_->InitAsDefaultInstance();
  Request_SGXSwitchExtendedEpidGroupRequest::default_instance_->InitAsDefaultInstance();
  Request_SGXRegisterRequest::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Response_InitQuoteResponse::default_instance_->InitAsDefaultInstance();
  Response_GetQuoteResponse::default_instance_->InitAsDefaultInstance();
  Response_GetLaunchTokenResponse::default_instance_->InitAsDefaultInstance();
  Response_ReportAttestationErrorResponse::default_instance_->InitAsDefaultInstance();
  Response_CreateSessionResponse::default_instance_->InitAsDefaultInstance();
  Response_InvokeServiceResponse::default_instance_->InitAsDefaultInstance();
  Response_ExchangeReportResponse::default_instance_->InitAsDefaultInstance();
  Response_CloseSessionResponse::default_instance_->InitAsDefaultInstance();
  Response_GetPsCapResponse::default_instance_->InitAsDefaultInstance();
  Response_GetWhiteListSizeResponse::default_instance_->InitAsDefaultInstance();
  Response_GetWhiteListResponse::default_instance_->InitAsDefaultInstance();
  Response_SGXGetExtendedEpidGroupIdResponse::default_instance_->InitAsDefaultInstance();
  Response_SGXSwitchExtendedEpidGroupResponse::default_instance_->InitAsDefaultInstance();
  Response_SGXRegisterResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aesm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aesm_2eproto {
  StaticDescriptorInitializer_aesm_2eproto() {
    protobuf_AddDesc_aesm_2eproto();
  }
} static_descriptor_initializer_aesm_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_InitQuoteRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_InitQuoteRequest::Request_InitQuoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.InitQuoteRequest)
}

void Request_InitQuoteRequest::InitAsDefaultInstance() {
}

Request_InitQuoteRequest::Request_InitQuoteRequest(const Request_InitQuoteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InitQuoteRequest)
}

void Request_InitQuoteRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_InitQuoteRequest::~Request_InitQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InitQuoteRequest)
  SharedDtor();
}

void Request_InitQuoteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_InitQuoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_InitQuoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_InitQuoteRequest_descriptor_;
}

const Request_InitQuoteRequest& Request_InitQuoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_InitQuoteRequest* Request_InitQuoteRequest::default_instance_ = NULL;

Request_InitQuoteRequest* Request_InitQuoteRequest::New(::google::protobuf::Arena* arena) const {
  Request_InitQuoteRequest* n = new Request_InitQuoteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_InitQuoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.InitQuoteRequest)
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_InitQuoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.InitQuoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.InitQuoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.InitQuoteRequest)
  return false;
#undef DO_
}

void Request_InitQuoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.InitQuoteRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.InitQuoteRequest)
}

::google::protobuf::uint8* Request_InitQuoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.InitQuoteRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.InitQuoteRequest)
  return target;
}

int Request_InitQuoteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.InitQuoteRequest)
  int total_size = 0;

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_InitQuoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.InitQuoteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_InitQuoteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_InitQuoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.InitQuoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.InitQuoteRequest)
    MergeFrom(*source);
  }
}

void Request_InitQuoteRequest::MergeFrom(const Request_InitQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.InitQuoteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_InitQuoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.InitQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_InitQuoteRequest::CopyFrom(const Request_InitQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.InitQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InitQuoteRequest::IsInitialized() const {

  return true;
}

void Request_InitQuoteRequest::Swap(Request_InitQuoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_InitQuoteRequest::InternalSwap(Request_InitQuoteRequest* other) {
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_InitQuoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_InitQuoteRequest_descriptor_;
  metadata.reflection = Request_InitQuoteRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetQuoteRequest::kReportFieldNumber;
const int Request_GetQuoteRequest::kQuoteTypeFieldNumber;
const int Request_GetQuoteRequest::kSpidFieldNumber;
const int Request_GetQuoteRequest::kNonceFieldNumber;
const int Request_GetQuoteRequest::kSigRlFieldNumber;
const int Request_GetQuoteRequest::kBufSizeFieldNumber;
const int Request_GetQuoteRequest::kQeReportFieldNumber;
const int Request_GetQuoteRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetQuoteRequest::Request_GetQuoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetQuoteRequest)
}

void Request_GetQuoteRequest::InitAsDefaultInstance() {
}

Request_GetQuoteRequest::Request_GetQuoteRequest(const Request_GetQuoteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteRequest)
}

void Request_GetQuoteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quote_type_ = 0u;
  spid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_rl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buf_size_ = 0u;
  qe_report_ = false;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetQuoteRequest::~Request_GetQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteRequest)
  SharedDtor();
}

void Request_GetQuoteRequest::SharedDtor() {
  report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_rl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_GetQuoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetQuoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetQuoteRequest_descriptor_;
}

const Request_GetQuoteRequest& Request_GetQuoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_GetQuoteRequest* Request_GetQuoteRequest::default_instance_ = NULL;

Request_GetQuoteRequest* Request_GetQuoteRequest::New(::google::protobuf::Arena* arena) const {
  Request_GetQuoteRequest* n = new Request_GetQuoteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_GetQuoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetQuoteRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_GetQuoteRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_GetQuoteRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(quote_type_, buf_size_);
    ZR_(qe_report_, timeout_);
    if (has_report()) {
      report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_spid()) {
      spid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nonce()) {
      nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sig_rl()) {
      sig_rl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_GetQuoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetQuoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes report = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quote_type;
        break;
      }

      // required uint32 quote_type = 2;
      case 2: {
        if (tag == 16) {
         parse_quote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quote_type_)));
          set_has_quote_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spid;
        break;
      }

      // required bytes spid = 3;
      case 3: {
        if (tag == 26) {
         parse_spid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nonce;
        break;
      }

      // optional bytes nonce = 4;
      case 4: {
        if (tag == 34) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sig_rl;
        break;
      }

      // optional bytes sig_rl = 5;
      case 5: {
        if (tag == 42) {
         parse_sig_rl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig_rl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buf_size;
        break;
      }

      // required uint32 buf_size = 6;
      case 6: {
        if (tag == 48) {
         parse_buf_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buf_size_)));
          set_has_buf_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_qe_report;
        break;
      }

      // optional bool qe_report = 7;
      case 7: {
        if (tag == 56) {
         parse_qe_report:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qe_report_)));
          set_has_qe_report();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetQuoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetQuoteRequest)
  return false;
#undef DO_
}

void Request_GetQuoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetQuoteRequest)
  // required bytes report = 1;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->report(), output);
  }

  // required uint32 quote_type = 2;
  if (has_quote_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quote_type(), output);
  }

  // required bytes spid = 3;
  if (has_spid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->spid(), output);
  }

  // optional bytes nonce = 4;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->nonce(), output);
  }

  // optional bytes sig_rl = 5;
  if (has_sig_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sig_rl(), output);
  }

  // required uint32 buf_size = 6;
  if (has_buf_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buf_size(), output);
  }

  // optional bool qe_report = 7;
  if (has_qe_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->qe_report(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetQuoteRequest)
}

::google::protobuf::uint8* Request_GetQuoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetQuoteRequest)
  // required bytes report = 1;
  if (has_report()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->report(), target);
  }

  // required uint32 quote_type = 2;
  if (has_quote_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quote_type(), target);
  }

  // required bytes spid = 3;
  if (has_spid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->spid(), target);
  }

  // optional bytes nonce = 4;
  if (has_nonce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->nonce(), target);
  }

  // optional bytes sig_rl = 5;
  if (has_sig_rl()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sig_rl(), target);
  }

  // required uint32 buf_size = 6;
  if (has_buf_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buf_size(), target);
  }

  // optional bool qe_report = 7;
  if (has_qe_report()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->qe_report(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetQuoteRequest)
  return target;
}

int Request_GetQuoteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetQuoteRequest)
  int total_size = 0;

  if (has_report()) {
    // required bytes report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->report());
  }

  if (has_quote_type()) {
    // required uint32 quote_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quote_type());
  }

  if (has_spid()) {
    // required bytes spid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spid());
  }

  if (has_buf_size()) {
    // required uint32 buf_size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buf_size());
  }

  return total_size;
}
int Request_GetQuoteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetQuoteRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required bytes report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->report());

    // required uint32 quote_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quote_type());

    // required bytes spid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spid());

    // required uint32 buf_size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buf_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 216u) {
    // optional bytes nonce = 4;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nonce());
    }

    // optional bytes sig_rl = 5;
    if (has_sig_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig_rl());
    }

    // optional bool qe_report = 7;
    if (has_qe_report()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetQuoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.GetQuoteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_GetQuoteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_GetQuoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.GetQuoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.GetQuoteRequest)
    MergeFrom(*source);
  }
}

void Request_GetQuoteRequest::MergeFrom(const Request_GetQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetQuoteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_report()) {
      set_has_report();
      report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
    }
    if (from.has_quote_type()) {
      set_quote_type(from.quote_type());
    }
    if (from.has_spid()) {
      set_has_spid();
      spid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spid_);
    }
    if (from.has_nonce()) {
      set_has_nonce();
      nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
    }
    if (from.has_sig_rl()) {
      set_has_sig_rl();
      sig_rl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_rl_);
    }
    if (from.has_buf_size()) {
      set_buf_size(from.buf_size());
    }
    if (from.has_qe_report()) {
      set_qe_report(from.qe_report());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_GetQuoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.GetQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetQuoteRequest::CopyFrom(const Request_GetQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void Request_GetQuoteRequest::Swap(Request_GetQuoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetQuoteRequest::InternalSwap(Request_GetQuoteRequest* other) {
  report_.Swap(&other->report_);
  std::swap(quote_type_, other->quote_type_);
  spid_.Swap(&other->spid_);
  nonce_.Swap(&other->nonce_);
  sig_rl_.Swap(&other->sig_rl_);
  std::swap(buf_size_, other->buf_size_);
  std::swap(qe_report_, other->qe_report_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_GetQuoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetQuoteRequest_descriptor_;
  metadata.reflection = Request_GetQuoteRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetLaunchTokenRequest::kMrEnclaveFieldNumber;
const int Request_GetLaunchTokenRequest::kMrSignerFieldNumber;
const int Request_GetLaunchTokenRequest::kSeAttributesFieldNumber;
const int Request_GetLaunchTokenRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetLaunchTokenRequest)
}

void Request_GetLaunchTokenRequest::InitAsDefaultInstance() {
}

Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest(const Request_GetLaunchTokenRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetLaunchTokenRequest)
}

void Request_GetLaunchTokenRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mr_enclave_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mr_signer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_attributes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetLaunchTokenRequest::~Request_GetLaunchTokenRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetLaunchTokenRequest)
  SharedDtor();
}

void Request_GetLaunchTokenRequest::SharedDtor() {
  mr_enclave_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mr_signer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_attributes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_GetLaunchTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetLaunchTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetLaunchTokenRequest_descriptor_;
}

const Request_GetLaunchTokenRequest& Request_GetLaunchTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_GetLaunchTokenRequest* Request_GetLaunchTokenRequest::default_instance_ = NULL;

Request_GetLaunchTokenRequest* Request_GetLaunchTokenRequest::New(::google::protobuf::Arena* arena) const {
  Request_GetLaunchTokenRequest* n = new Request_GetLaunchTokenRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_GetLaunchTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetLaunchTokenRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_mr_enclave()) {
      mr_enclave_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mr_signer()) {
      mr_signer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_se_attributes()) {
      se_attributes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_GetLaunchTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetLaunchTokenRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes mr_enclave = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mr_enclave()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mr_signer;
        break;
      }

      // required bytes mr_signer = 2;
      case 2: {
        if (tag == 18) {
         parse_mr_signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mr_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_se_attributes;
        break;
      }

      // required bytes se_attributes = 3;
      case 3: {
        if (tag == 26) {
         parse_se_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetLaunchTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetLaunchTokenRequest)
  return false;
#undef DO_
}

void Request_GetLaunchTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetLaunchTokenRequest)
  // required bytes mr_enclave = 1;
  if (has_mr_enclave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->mr_enclave(), output);
  }

  // required bytes mr_signer = 2;
  if (has_mr_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mr_signer(), output);
  }

  // required bytes se_attributes = 3;
  if (has_se_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->se_attributes(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetLaunchTokenRequest)
}

::google::protobuf::uint8* Request_GetLaunchTokenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetLaunchTokenRequest)
  // required bytes mr_enclave = 1;
  if (has_mr_enclave()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mr_enclave(), target);
  }

  // required bytes mr_signer = 2;
  if (has_mr_signer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mr_signer(), target);
  }

  // required bytes se_attributes = 3;
  if (has_se_attributes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->se_attributes(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetLaunchTokenRequest)
  return target;
}

int Request_GetLaunchTokenRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetLaunchTokenRequest)
  int total_size = 0;

  if (has_mr_enclave()) {
    // required bytes mr_enclave = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_enclave());
  }

  if (has_mr_signer()) {
    // required bytes mr_signer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_signer());
  }

  if (has_se_attributes()) {
    // required bytes se_attributes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->se_attributes());
  }

  return total_size;
}
int Request_GetLaunchTokenRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetLaunchTokenRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes mr_enclave = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_enclave());

    // required bytes mr_signer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_signer());

    // required bytes se_attributes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->se_attributes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetLaunchTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.GetLaunchTokenRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_GetLaunchTokenRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_GetLaunchTokenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.GetLaunchTokenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.GetLaunchTokenRequest)
    MergeFrom(*source);
  }
}

void Request_GetLaunchTokenRequest::MergeFrom(const Request_GetLaunchTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetLaunchTokenRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mr_enclave()) {
      set_has_mr_enclave();
      mr_enclave_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mr_enclave_);
    }
    if (from.has_mr_signer()) {
      set_has_mr_signer();
      mr_signer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mr_signer_);
    }
    if (from.has_se_attributes()) {
      set_has_se_attributes();
      se_attributes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.se_attributes_);
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_GetLaunchTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.GetLaunchTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetLaunchTokenRequest::CopyFrom(const Request_GetLaunchTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetLaunchTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetLaunchTokenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_GetLaunchTokenRequest::Swap(Request_GetLaunchTokenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetLaunchTokenRequest::InternalSwap(Request_GetLaunchTokenRequest* other) {
  mr_enclave_.Swap(&other->mr_enclave_);
  mr_signer_.Swap(&other->mr_signer_);
  se_attributes_.Swap(&other->se_attributes_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_GetLaunchTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetLaunchTokenRequest_descriptor_;
  metadata.reflection = Request_GetLaunchTokenRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_ReportAttestationErrorRequest::kPlatformInfoFieldNumber;
const int Request_ReportAttestationErrorRequest::kAttestationErrorCodeFieldNumber;
const int Request_ReportAttestationErrorRequest::kUpdateInfoSizeFieldNumber;
const int Request_ReportAttestationErrorRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.ReportAttestationErrorRequest)
}

void Request_ReportAttestationErrorRequest::InitAsDefaultInstance() {
}

Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest(const Request_ReportAttestationErrorRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.ReportAttestationErrorRequest)
}

void Request_ReportAttestationErrorRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attestation_error_code_ = 0u;
  update_info_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ReportAttestationErrorRequest::~Request_ReportAttestationErrorRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.ReportAttestationErrorRequest)
  SharedDtor();
}

void Request_ReportAttestationErrorRequest::SharedDtor() {
  platform_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_ReportAttestationErrorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ReportAttestationErrorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ReportAttestationErrorRequest_descriptor_;
}

const Request_ReportAttestationErrorRequest& Request_ReportAttestationErrorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_ReportAttestationErrorRequest* Request_ReportAttestationErrorRequest::default_instance_ = NULL;

Request_ReportAttestationErrorRequest* Request_ReportAttestationErrorRequest::New(::google::protobuf::Arena* arena) const {
  Request_ReportAttestationErrorRequest* n = new Request_ReportAttestationErrorRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_ReportAttestationErrorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.ReportAttestationErrorRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_ReportAttestationErrorRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_ReportAttestationErrorRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(attestation_error_code_, timeout_);
    if (has_platform_info()) {
      platform_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_ReportAttestationErrorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.ReportAttestationErrorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes platform_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attestation_error_code;
        break;
      }

      // required uint32 attestation_error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_attestation_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attestation_error_code_)));
          set_has_attestation_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_info_size;
        break;
      }

      // required uint32 update_info_size = 3;
      case 3: {
        if (tag == 24) {
         parse_update_info_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_info_size_)));
          set_has_update_info_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.ReportAttestationErrorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.ReportAttestationErrorRequest)
  return false;
#undef DO_
}

void Request_ReportAttestationErrorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.ReportAttestationErrorRequest)
  // required bytes platform_info = 1;
  if (has_platform_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_info(), output);
  }

  // required uint32 attestation_error_code = 2;
  if (has_attestation_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attestation_error_code(), output);
  }

  // required uint32 update_info_size = 3;
  if (has_update_info_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_info_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.ReportAttestationErrorRequest)
}

::google::protobuf::uint8* Request_ReportAttestationErrorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.ReportAttestationErrorRequest)
  // required bytes platform_info = 1;
  if (has_platform_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->platform_info(), target);
  }

  // required uint32 attestation_error_code = 2;
  if (has_attestation_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attestation_error_code(), target);
  }

  // required uint32 update_info_size = 3;
  if (has_update_info_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->update_info_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.ReportAttestationErrorRequest)
  return target;
}

int Request_ReportAttestationErrorRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.ReportAttestationErrorRequest)
  int total_size = 0;

  if (has_platform_info()) {
    // required bytes platform_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->platform_info());
  }

  if (has_attestation_error_code()) {
    // required uint32 attestation_error_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attestation_error_code());
  }

  if (has_update_info_size()) {
    // required uint32 update_info_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_info_size());
  }

  return total_size;
}
int Request_ReportAttestationErrorRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.ReportAttestationErrorRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes platform_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->platform_info());

    // required uint32 attestation_error_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attestation_error_code());

    // required uint32 update_info_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_info_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ReportAttestationErrorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_ReportAttestationErrorRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_ReportAttestationErrorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.ReportAttestationErrorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.ReportAttestationErrorRequest)
    MergeFrom(*source);
  }
}

void Request_ReportAttestationErrorRequest::MergeFrom(const Request_ReportAttestationErrorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_info()) {
      set_has_platform_info();
      platform_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_info_);
    }
    if (from.has_attestation_error_code()) {
      set_attestation_error_code(from.attestation_error_code());
    }
    if (from.has_update_info_size()) {
      set_update_info_size(from.update_info_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_ReportAttestationErrorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ReportAttestationErrorRequest::CopyFrom(const Request_ReportAttestationErrorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ReportAttestationErrorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_ReportAttestationErrorRequest::Swap(Request_ReportAttestationErrorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_ReportAttestationErrorRequest::InternalSwap(Request_ReportAttestationErrorRequest* other) {
  platform_info_.Swap(&other->platform_info_);
  std::swap(attestation_error_code_, other->attestation_error_code_);
  std::swap(update_info_size_, other->update_info_size_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_ReportAttestationErrorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ReportAttestationErrorRequest_descriptor_;
  metadata.reflection = Request_ReportAttestationErrorRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_CreateSessionRequest::kDhMsg1SizeFieldNumber;
const int Request_CreateSessionRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_CreateSessionRequest::Request_CreateSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.CreateSessionRequest)
}

void Request_CreateSessionRequest::InitAsDefaultInstance() {
}

Request_CreateSessionRequest::Request_CreateSessionRequest(const Request_CreateSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.CreateSessionRequest)
}

void Request_CreateSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  dh_msg1_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_CreateSessionRequest::~Request_CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.CreateSessionRequest)
  SharedDtor();
}

void Request_CreateSessionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_CreateSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CreateSessionRequest_descriptor_;
}

const Request_CreateSessionRequest& Request_CreateSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_CreateSessionRequest* Request_CreateSessionRequest::default_instance_ = NULL;

Request_CreateSessionRequest* Request_CreateSessionRequest::New(::google::protobuf::Arena* arena) const {
  Request_CreateSessionRequest* n = new Request_CreateSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.CreateSessionRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_CreateSessionRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_CreateSessionRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dh_msg1_size_, timeout_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.CreateSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dh_msg1_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dh_msg1_size_)));
          set_has_dh_msg1_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.CreateSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.CreateSessionRequest)
  return false;
#undef DO_
}

void Request_CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.CreateSessionRequest)
  // required uint32 dh_msg1_size = 1;
  if (has_dh_msg1_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dh_msg1_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.CreateSessionRequest)
}

::google::protobuf::uint8* Request_CreateSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.CreateSessionRequest)
  // required uint32 dh_msg1_size = 1;
  if (has_dh_msg1_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dh_msg1_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.CreateSessionRequest)
  return target;
}

int Request_CreateSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.CreateSessionRequest)
  int total_size = 0;

  // required uint32 dh_msg1_size = 1;
  if (has_dh_msg1_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dh_msg1_size());
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.CreateSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_CreateSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_CreateSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.CreateSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.CreateSessionRequest)
    MergeFrom(*source);
  }
}

void Request_CreateSessionRequest::MergeFrom(const Request_CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.CreateSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dh_msg1_size()) {
      set_dh_msg1_size(from.dh_msg1_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_CreateSessionRequest::CopyFrom(const Request_CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CreateSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_CreateSessionRequest::Swap(Request_CreateSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_CreateSessionRequest::InternalSwap(Request_CreateSessionRequest* other) {
  std::swap(dh_msg1_size_, other->dh_msg1_size_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_CreateSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_CreateSessionRequest_descriptor_;
  metadata.reflection = Request_CreateSessionRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_InvokeServiceRequest::kPseMessageFieldNumber;
const int Request_InvokeServiceRequest::kPseRespSizeFieldNumber;
const int Request_InvokeServiceRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_InvokeServiceRequest::Request_InvokeServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.InvokeServiceRequest)
}

void Request_InvokeServiceRequest::InitAsDefaultInstance() {
}

Request_InvokeServiceRequest::Request_InvokeServiceRequest(const Request_InvokeServiceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InvokeServiceRequest)
}

void Request_InvokeServiceRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pse_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pse_resp_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_InvokeServiceRequest::~Request_InvokeServiceRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InvokeServiceRequest)
  SharedDtor();
}

void Request_InvokeServiceRequest::SharedDtor() {
  pse_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_InvokeServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_InvokeServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_InvokeServiceRequest_descriptor_;
}

const Request_InvokeServiceRequest& Request_InvokeServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_InvokeServiceRequest* Request_InvokeServiceRequest::default_instance_ = NULL;

Request_InvokeServiceRequest* Request_InvokeServiceRequest::New(::google::protobuf::Arena* arena) const {
  Request_InvokeServiceRequest* n = new Request_InvokeServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_InvokeServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.InvokeServiceRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_InvokeServiceRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_InvokeServiceRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(pse_resp_size_, timeout_);
    if (has_pse_message()) {
      pse_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_InvokeServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.InvokeServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes pse_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pse_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pse_resp_size;
        break;
      }

      // required uint32 pse_resp_size = 2;
      case 2: {
        if (tag == 16) {
         parse_pse_resp_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pse_resp_size_)));
          set_has_pse_resp_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.InvokeServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.InvokeServiceRequest)
  return false;
#undef DO_
}

void Request_InvokeServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.InvokeServiceRequest)
  // required bytes pse_message = 1;
  if (has_pse_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pse_message(), output);
  }

  // required uint32 pse_resp_size = 2;
  if (has_pse_resp_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pse_resp_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.InvokeServiceRequest)
}

::google::protobuf::uint8* Request_InvokeServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.InvokeServiceRequest)
  // required bytes pse_message = 1;
  if (has_pse_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pse_message(), target);
  }

  // required uint32 pse_resp_size = 2;
  if (has_pse_resp_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pse_resp_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.InvokeServiceRequest)
  return target;
}

int Request_InvokeServiceRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.InvokeServiceRequest)
  int total_size = 0;

  if (has_pse_message()) {
    // required bytes pse_message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pse_message());
  }

  if (has_pse_resp_size()) {
    // required uint32 pse_resp_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pse_resp_size());
  }

  return total_size;
}
int Request_InvokeServiceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.InvokeServiceRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes pse_message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pse_message());

    // required uint32 pse_resp_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pse_resp_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_InvokeServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.InvokeServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_InvokeServiceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_InvokeServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.InvokeServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.InvokeServiceRequest)
    MergeFrom(*source);
  }
}

void Request_InvokeServiceRequest::MergeFrom(const Request_InvokeServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.InvokeServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pse_message()) {
      set_has_pse_message();
      pse_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pse_message_);
    }
    if (from.has_pse_resp_size()) {
      set_pse_resp_size(from.pse_resp_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_InvokeServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.InvokeServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_InvokeServiceRequest::CopyFrom(const Request_InvokeServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.InvokeServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InvokeServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request_InvokeServiceRequest::Swap(Request_InvokeServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_InvokeServiceRequest::InternalSwap(Request_InvokeServiceRequest* other) {
  pse_message_.Swap(&other->pse_message_);
  std::swap(pse_resp_size_, other->pse_resp_size_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_InvokeServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_InvokeServiceRequest_descriptor_;
  metadata.reflection = Request_InvokeServiceRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_ExchangeReportRequest::kSessionIdFieldNumber;
const int Request_ExchangeReportRequest::kSeDhMsg2FieldNumber;
const int Request_ExchangeReportRequest::kSeDhMsg3SizeFieldNumber;
const int Request_ExchangeReportRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_ExchangeReportRequest::Request_ExchangeReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.ExchangeReportRequest)
}

void Request_ExchangeReportRequest::InitAsDefaultInstance() {
}

Request_ExchangeReportRequest::Request_ExchangeReportRequest(const Request_ExchangeReportRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.ExchangeReportRequest)
}

void Request_ExchangeReportRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_ = 0u;
  se_dh_msg2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_dh_msg3_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ExchangeReportRequest::~Request_ExchangeReportRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.ExchangeReportRequest)
  SharedDtor();
}

void Request_ExchangeReportRequest::SharedDtor() {
  se_dh_msg2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_ExchangeReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ExchangeReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ExchangeReportRequest_descriptor_;
}

const Request_ExchangeReportRequest& Request_ExchangeReportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_ExchangeReportRequest* Request_ExchangeReportRequest::default_instance_ = NULL;

Request_ExchangeReportRequest* Request_ExchangeReportRequest::New(::google::protobuf::Arena* arena) const {
  Request_ExchangeReportRequest* n = new Request_ExchangeReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_ExchangeReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.ExchangeReportRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_ExchangeReportRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_ExchangeReportRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(session_id_, timeout_);
    if (has_se_dh_msg2()) {
      se_dh_msg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_ExchangeReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.ExchangeReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_se_dh_msg2;
        break;
      }

      // required bytes se_dh_msg2 = 2;
      case 2: {
        if (tag == 18) {
         parse_se_dh_msg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_dh_msg2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_se_dh_msg3_size;
        break;
      }

      // required uint32 se_dh_msg3_size = 3;
      case 3: {
        if (tag == 24) {
         parse_se_dh_msg3_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &se_dh_msg3_size_)));
          set_has_se_dh_msg3_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.ExchangeReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.ExchangeReportRequest)
  return false;
#undef DO_
}

void Request_ExchangeReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.ExchangeReportRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // required bytes se_dh_msg2 = 2;
  if (has_se_dh_msg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->se_dh_msg2(), output);
  }

  // required uint32 se_dh_msg3_size = 3;
  if (has_se_dh_msg3_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->se_dh_msg3_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.ExchangeReportRequest)
}

::google::protobuf::uint8* Request_ExchangeReportRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.ExchangeReportRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // required bytes se_dh_msg2 = 2;
  if (has_se_dh_msg2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->se_dh_msg2(), target);
  }

  // required uint32 se_dh_msg3_size = 3;
  if (has_se_dh_msg3_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->se_dh_msg3_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.ExchangeReportRequest)
  return target;
}

int Request_ExchangeReportRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.ExchangeReportRequest)
  int total_size = 0;

  if (has_session_id()) {
    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_se_dh_msg2()) {
    // required bytes se_dh_msg2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->se_dh_msg2());
  }

  if (has_se_dh_msg3_size()) {
    // required uint32 se_dh_msg3_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->se_dh_msg3_size());
  }

  return total_size;
}
int Request_ExchangeReportRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.ExchangeReportRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required bytes se_dh_msg2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->se_dh_msg2());

    // required uint32 se_dh_msg3_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->se_dh_msg3_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ExchangeReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.ExchangeReportRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_ExchangeReportRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_ExchangeReportRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.ExchangeReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.ExchangeReportRequest)
    MergeFrom(*source);
  }
}

void Request_ExchangeReportRequest::MergeFrom(const Request_ExchangeReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.ExchangeReportRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_se_dh_msg2()) {
      set_has_se_dh_msg2();
      se_dh_msg2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.se_dh_msg2_);
    }
    if (from.has_se_dh_msg3_size()) {
      set_se_dh_msg3_size(from.se_dh_msg3_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_ExchangeReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.ExchangeReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ExchangeReportRequest::CopyFrom(const Request_ExchangeReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.ExchangeReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ExchangeReportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_ExchangeReportRequest::Swap(Request_ExchangeReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_ExchangeReportRequest::InternalSwap(Request_ExchangeReportRequest* other) {
  std::swap(session_id_, other->session_id_);
  se_dh_msg2_.Swap(&other->se_dh_msg2_);
  std::swap(se_dh_msg3_size_, other->se_dh_msg3_size_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_ExchangeReportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ExchangeReportRequest_descriptor_;
  metadata.reflection = Request_ExchangeReportRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_CloseSessionRequest::kSessionIdFieldNumber;
const int Request_CloseSessionRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_CloseSessionRequest::Request_CloseSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.CloseSessionRequest)
}

void Request_CloseSessionRequest::InitAsDefaultInstance() {
}

Request_CloseSessionRequest::Request_CloseSessionRequest(const Request_CloseSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.CloseSessionRequest)
}

void Request_CloseSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_CloseSessionRequest::~Request_CloseSessionRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.CloseSessionRequest)
  SharedDtor();
}

void Request_CloseSessionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_CloseSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_CloseSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CloseSessionRequest_descriptor_;
}

const Request_CloseSessionRequest& Request_CloseSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_CloseSessionRequest* Request_CloseSessionRequest::default_instance_ = NULL;

Request_CloseSessionRequest* Request_CloseSessionRequest::New(::google::protobuf::Arena* arena) const {
  Request_CloseSessionRequest* n = new Request_CloseSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_CloseSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.CloseSessionRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_CloseSessionRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_CloseSessionRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(session_id_, timeout_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_CloseSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.CloseSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.CloseSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.CloseSessionRequest)
  return false;
#undef DO_
}

void Request_CloseSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.CloseSessionRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.CloseSessionRequest)
}

::google::protobuf::uint8* Request_CloseSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.CloseSessionRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.CloseSessionRequest)
  return target;
}

int Request_CloseSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.CloseSessionRequest)
  int total_size = 0;

  // required uint32 session_id = 1;
  if (has_session_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_CloseSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.CloseSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_CloseSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_CloseSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.CloseSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.CloseSessionRequest)
    MergeFrom(*source);
  }
}

void Request_CloseSessionRequest::MergeFrom(const Request_CloseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.CloseSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_CloseSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.CloseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_CloseSessionRequest::CopyFrom(const Request_CloseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.CloseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CloseSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_CloseSessionRequest::Swap(Request_CloseSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_CloseSessionRequest::InternalSwap(Request_CloseSessionRequest* other) {
  std::swap(session_id_, other->session_id_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_CloseSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_CloseSessionRequest_descriptor_;
  metadata.reflection = Request_CloseSessionRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetPsCapRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetPsCapRequest::Request_GetPsCapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetPsCapRequest)
}

void Request_GetPsCapRequest::InitAsDefaultInstance() {
}

Request_GetPsCapRequest::Request_GetPsCapRequest(const Request_GetPsCapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetPsCapRequest)
}

void Request_GetPsCapRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetPsCapRequest::~Request_GetPsCapRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetPsCapRequest)
  SharedDtor();
}

void Request_GetPsCapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetPsCapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetPsCapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetPsCapRequest_descriptor_;
}

const Request_GetPsCapRequest& Request_GetPsCapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_GetPsCapRequest* Request_GetPsCapRequest::default_instance_ = NULL;

Request_GetPsCapRequest* Request_GetPsCapRequest::New(::google::protobuf::Arena* arena) const {
  Request_GetPsCapRequest* n = new Request_GetPsCapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_GetPsCapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetPsCapRequest)
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_GetPsCapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetPsCapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetPsCapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetPsCapRequest)
  return false;
#undef DO_
}

void Request_GetPsCapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetPsCapRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetPsCapRequest)
}

::google::protobuf::uint8* Request_GetPsCapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetPsCapRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetPsCapRequest)
  return target;
}

int Request_GetPsCapRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetPsCapRequest)
  int total_size = 0;

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetPsCapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.GetPsCapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_GetPsCapRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_GetPsCapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.GetPsCapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.GetPsCapRequest)
    MergeFrom(*source);
  }
}

void Request_GetPsCapRequest::MergeFrom(const Request_GetPsCapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetPsCapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_GetPsCapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.GetPsCapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetPsCapRequest::CopyFrom(const Request_GetPsCapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetPsCapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetPsCapRequest::IsInitialized() const {

  return true;
}

void Request_GetPsCapRequest::Swap(Request_GetPsCapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetPsCapRequest::InternalSwap(Request_GetPsCapRequest* other) {
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_GetPsCapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetPsCapRequest_descriptor_;
  metadata.reflection = Request_GetPsCapRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetWhiteListSizeRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetWhiteListSizeRequest)
}

void Request_GetWhiteListSizeRequest::InitAsDefaultInstance() {
}

Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest(const Request_GetWhiteListSizeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListSizeRequest)
}

void Request_GetWhiteListSizeRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetWhiteListSizeRequest::~Request_GetWhiteListSizeRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListSizeRequest)
  SharedDtor();
}

void Request_GetWhiteListSizeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetWhiteListSizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetWhiteListSizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetWhiteListSizeRequest_descriptor_;
}

const Request_GetWhiteListSizeRequest& Request_GetWhiteListSizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_GetWhiteListSizeRequest* Request_GetWhiteListSizeRequest::default_instance_ = NULL;

Request_GetWhiteListSizeRequest* Request_GetWhiteListSizeRequest::New(::google::protobuf::Arena* arena) const {
  Request_GetWhiteListSizeRequest* n = new Request_GetWhiteListSizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_GetWhiteListSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetWhiteListSizeRequest)
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_GetWhiteListSizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetWhiteListSizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetWhiteListSizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetWhiteListSizeRequest)
  return false;
#undef DO_
}

void Request_GetWhiteListSizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetWhiteListSizeRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetWhiteListSizeRequest)
}

::google::protobuf::uint8* Request_GetWhiteListSizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetWhiteListSizeRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetWhiteListSizeRequest)
  return target;
}

int Request_GetWhiteListSizeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetWhiteListSizeRequest)
  int total_size = 0;

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetWhiteListSizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_GetWhiteListSizeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_GetWhiteListSizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.GetWhiteListSizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.GetWhiteListSizeRequest)
    MergeFrom(*source);
  }
}

void Request_GetWhiteListSizeRequest::MergeFrom(const Request_GetWhiteListSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_GetWhiteListSizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetWhiteListSizeRequest::CopyFrom(const Request_GetWhiteListSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListSizeRequest::IsInitialized() const {

  return true;
}

void Request_GetWhiteListSizeRequest::Swap(Request_GetWhiteListSizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetWhiteListSizeRequest::InternalSwap(Request_GetWhiteListSizeRequest* other) {
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_GetWhiteListSizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetWhiteListSizeRequest_descriptor_;
  metadata.reflection = Request_GetWhiteListSizeRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetWhiteListRequest::kWhiteListSizeFieldNumber;
const int Request_GetWhiteListRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetWhiteListRequest::Request_GetWhiteListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetWhiteListRequest)
}

void Request_GetWhiteListRequest::InitAsDefaultInstance() {
}

Request_GetWhiteListRequest::Request_GetWhiteListRequest(const Request_GetWhiteListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListRequest)
}

void Request_GetWhiteListRequest::SharedCtor() {
  _cached_size_ = 0;
  white_list_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetWhiteListRequest::~Request_GetWhiteListRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListRequest)
  SharedDtor();
}

void Request_GetWhiteListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetWhiteListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetWhiteListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetWhiteListRequest_descriptor_;
}

const Request_GetWhiteListRequest& Request_GetWhiteListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_GetWhiteListRequest* Request_GetWhiteListRequest::default_instance_ = NULL;

Request_GetWhiteListRequest* Request_GetWhiteListRequest::New(::google::protobuf::Arena* arena) const {
  Request_GetWhiteListRequest* n = new Request_GetWhiteListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_GetWhiteListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetWhiteListRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_GetWhiteListRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_GetWhiteListRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(white_list_size_, timeout_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_GetWhiteListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetWhiteListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 white_list_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &white_list_size_)));
          set_has_white_list_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetWhiteListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetWhiteListRequest)
  return false;
#undef DO_
}

void Request_GetWhiteListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetWhiteListRequest)
  // optional uint32 white_list_size = 1;
  if (has_white_list_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->white_list_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetWhiteListRequest)
}

::google::protobuf::uint8* Request_GetWhiteListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetWhiteListRequest)
  // optional uint32 white_list_size = 1;
  if (has_white_list_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->white_list_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetWhiteListRequest)
  return target;
}

int Request_GetWhiteListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetWhiteListRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 white_list_size = 1;
    if (has_white_list_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->white_list_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetWhiteListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.GetWhiteListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_GetWhiteListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_GetWhiteListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.GetWhiteListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.GetWhiteListRequest)
    MergeFrom(*source);
  }
}

void Request_GetWhiteListRequest::MergeFrom(const Request_GetWhiteListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetWhiteListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_white_list_size()) {
      set_white_list_size(from.white_list_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_GetWhiteListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.GetWhiteListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetWhiteListRequest::CopyFrom(const Request_GetWhiteListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetWhiteListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListRequest::IsInitialized() const {

  return true;
}

void Request_GetWhiteListRequest::Swap(Request_GetWhiteListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetWhiteListRequest::InternalSwap(Request_GetWhiteListRequest* other) {
  std::swap(white_list_size_, other->white_list_size_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_GetWhiteListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetWhiteListRequest_descriptor_;
  metadata.reflection = Request_GetWhiteListRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_SGXGetExtendedEpidGroupIdRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

void Request_SGXGetExtendedEpidGroupIdRequest::InitAsDefaultInstance() {
}

Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest(const Request_SGXGetExtendedEpidGroupIdRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_SGXGetExtendedEpidGroupIdRequest::~Request_SGXGetExtendedEpidGroupIdRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  SharedDtor();
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_SGXGetExtendedEpidGroupIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_SGXGetExtendedEpidGroupIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SGXGetExtendedEpidGroupIdRequest_descriptor_;
}

const Request_SGXGetExtendedEpidGroupIdRequest& Request_SGXGetExtendedEpidGroupIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_SGXGetExtendedEpidGroupIdRequest* Request_SGXGetExtendedEpidGroupIdRequest::default_instance_ = NULL;

Request_SGXGetExtendedEpidGroupIdRequest* Request_SGXGetExtendedEpidGroupIdRequest::New(::google::protobuf::Arena* arena) const {
  Request_SGXGetExtendedEpidGroupIdRequest* n = new Request_SGXGetExtendedEpidGroupIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_SGXGetExtendedEpidGroupIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_SGXGetExtendedEpidGroupIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return false;
#undef DO_
}

void Request_SGXGetExtendedEpidGroupIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

::google::protobuf::uint8* Request_SGXGetExtendedEpidGroupIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return target;
}

int Request_SGXGetExtendedEpidGroupIdRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  int total_size = 0;

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_SGXGetExtendedEpidGroupIdRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_SGXGetExtendedEpidGroupIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
    MergeFrom(*source);
  }
}

void Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_SGXGetExtendedEpidGroupIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_SGXGetExtendedEpidGroupIdRequest::CopyFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXGetExtendedEpidGroupIdRequest::IsInitialized() const {

  return true;
}

void Request_SGXGetExtendedEpidGroupIdRequest::Swap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_SGXGetExtendedEpidGroupIdRequest::InternalSwap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_SGXGetExtendedEpidGroupIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_SGXGetExtendedEpidGroupIdRequest_descriptor_;
  metadata.reflection = Request_SGXGetExtendedEpidGroupIdRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_SGXSwitchExtendedEpidGroupRequest::kXGroupIdFieldNumber;
const int Request_SGXSwitchExtendedEpidGroupRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

void Request_SGXSwitchExtendedEpidGroupRequest::InitAsDefaultInstance() {
}

Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest(const Request_SGXSwitchExtendedEpidGroupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  x_group_id_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_SGXSwitchExtendedEpidGroupRequest::~Request_SGXSwitchExtendedEpidGroupRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  SharedDtor();
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_SGXSwitchExtendedEpidGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_SGXSwitchExtendedEpidGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SGXSwitchExtendedEpidGroupRequest_descriptor_;
}

const Request_SGXSwitchExtendedEpidGroupRequest& Request_SGXSwitchExtendedEpidGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_SGXSwitchExtendedEpidGroupRequest* Request_SGXSwitchExtendedEpidGroupRequest::default_instance_ = NULL;

Request_SGXSwitchExtendedEpidGroupRequest* Request_SGXSwitchExtendedEpidGroupRequest::New(::google::protobuf::Arena* arena) const {
  Request_SGXSwitchExtendedEpidGroupRequest* n = new Request_SGXSwitchExtendedEpidGroupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_SGXSwitchExtendedEpidGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_SGXSwitchExtendedEpidGroupRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_SGXSwitchExtendedEpidGroupRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_group_id_, timeout_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_SGXSwitchExtendedEpidGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x_group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_group_id_)));
          set_has_x_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return false;
#undef DO_
}

void Request_SGXSwitchExtendedEpidGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  // optional uint32 x_group_id = 1;
  if (has_x_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x_group_id(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

::google::protobuf::uint8* Request_SGXSwitchExtendedEpidGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  // optional uint32 x_group_id = 1;
  if (has_x_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x_group_id(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return target;
}

int Request_SGXSwitchExtendedEpidGroupRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 x_group_id = 1;
    if (has_x_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_group_id());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_SGXSwitchExtendedEpidGroupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_SGXSwitchExtendedEpidGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
    MergeFrom(*source);
  }
}

void Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_group_id()) {
      set_x_group_id(from.x_group_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_SGXSwitchExtendedEpidGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_SGXSwitchExtendedEpidGroupRequest::CopyFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXSwitchExtendedEpidGroupRequest::IsInitialized() const {

  return true;
}

void Request_SGXSwitchExtendedEpidGroupRequest::Swap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_SGXSwitchExtendedEpidGroupRequest::InternalSwap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
  std::swap(x_group_id_, other->x_group_id_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_SGXSwitchExtendedEpidGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_SGXSwitchExtendedEpidGroupRequest_descriptor_;
  metadata.reflection = Request_SGXSwitchExtendedEpidGroupRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_SGXRegisterRequest::kBufFieldNumber;
const int Request_SGXRegisterRequest::kDataTypeFieldNumber;
const int Request_SGXRegisterRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_SGXRegisterRequest::Request_SGXRegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXRegisterRequest)
}

void Request_SGXRegisterRequest::InitAsDefaultInstance() {
}

Request_SGXRegisterRequest::Request_SGXRegisterRequest(const Request_SGXRegisterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXRegisterRequest)
}

void Request_SGXRegisterRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_SGXRegisterRequest::~Request_SGXRegisterRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXRegisterRequest)
  SharedDtor();
}

void Request_SGXRegisterRequest::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_SGXRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_SGXRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SGXRegisterRequest_descriptor_;
}

const Request_SGXRegisterRequest& Request_SGXRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request_SGXRegisterRequest* Request_SGXRegisterRequest::default_instance_ = NULL;

Request_SGXRegisterRequest* Request_SGXRegisterRequest::New(::google::protobuf::Arena* arena) const {
  Request_SGXRegisterRequest* n = new Request_SGXRegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_SGXRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXRegisterRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_SGXRegisterRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_SGXRegisterRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(data_type_, timeout_);
    if (has_buf()) {
      buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_SGXRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXRegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // required uint32 data_type = 2;
      case 2: {
        if (tag == 16) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXRegisterRequest)
  return false;
#undef DO_
}

void Request_SGXRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXRegisterRequest)
  // required bytes buf = 1;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->buf(), output);
  }

  // required uint32 data_type = 2;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_type(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXRegisterRequest)
}

::google::protobuf::uint8* Request_SGXRegisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXRegisterRequest)
  // required bytes buf = 1;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->buf(), target);
  }

  // required uint32 data_type = 2;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_type(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXRegisterRequest)
  return target;
}

int Request_SGXRegisterRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.SGXRegisterRequest)
  int total_size = 0;

  if (has_buf()) {
    // required bytes buf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());
  }

  if (has_data_type()) {
    // required uint32 data_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_type());
  }

  return total_size;
}
int Request_SGXRegisterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXRegisterRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes buf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());

    // required uint32 data_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_SGXRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request.SGXRegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_SGXRegisterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_SGXRegisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request.SGXRegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request.SGXRegisterRequest)
    MergeFrom(*source);
  }
}

void Request_SGXRegisterRequest::MergeFrom(const Request_SGXRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXRegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buf()) {
      set_has_buf();
      buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_SGXRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request.SGXRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_SGXRegisterRequest::CopyFrom(const Request_SGXRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request_SGXRegisterRequest::Swap(Request_SGXRegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_SGXRegisterRequest::InternalSwap(Request_SGXRegisterRequest* other) {
  buf_.Swap(&other->buf_);
  std::swap(data_type_, other->data_type_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_SGXRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_SGXRegisterRequest_descriptor_;
  metadata.reflection = Request_SGXRegisterRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kInitQuoteReqFieldNumber;
const int Request::kGetQuoteReqFieldNumber;
const int Request::kGetLicTokenReqFieldNumber;
const int Request::kReportErrReqFieldNumber;
const int Request::kCreateSessionReqFieldNumber;
const int Request::kInvokeServiceReqFieldNumber;
const int Request::kExchangeReportReqFieldNumber;
const int Request::kCloseSessionReqFieldNumber;
const int Request::kGetPsCapReqFieldNumber;
const int Request::kGetWhiteListSizeReqFieldNumber;
const int Request::kGetWhiteListReqFieldNumber;
const int Request::kSgxGetExtendedEpidGroupIdReqFieldNumber;
const int Request::kSgxSwitchExtendedEpidGroupReqFieldNumber;
const int Request::kSgxRegisterReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request)
}

void Request::InitAsDefaultInstance() {
  initquotereq_ = const_cast< ::aesm::message::Request_InitQuoteRequest*>(&::aesm::message::Request_InitQuoteRequest::default_instance());
  getquotereq_ = const_cast< ::aesm::message::Request_GetQuoteRequest*>(&::aesm::message::Request_GetQuoteRequest::default_instance());
  getlictokenreq_ = const_cast< ::aesm::message::Request_GetLaunchTokenRequest*>(&::aesm::message::Request_GetLaunchTokenRequest::default_instance());
  reporterrreq_ = const_cast< ::aesm::message::Request_ReportAttestationErrorRequest*>(&::aesm::message::Request_ReportAttestationErrorRequest::default_instance());
  createsessionreq_ = const_cast< ::aesm::message::Request_CreateSessionRequest*>(&::aesm::message::Request_CreateSessionRequest::default_instance());
  invokeservicereq_ = const_cast< ::aesm::message::Request_InvokeServiceRequest*>(&::aesm::message::Request_InvokeServiceRequest::default_instance());
  exchangereportreq_ = const_cast< ::aesm::message::Request_ExchangeReportRequest*>(&::aesm::message::Request_ExchangeReportRequest::default_instance());
  closesessionreq_ = const_cast< ::aesm::message::Request_CloseSessionRequest*>(&::aesm::message::Request_CloseSessionRequest::default_instance());
  getpscapreq_ = const_cast< ::aesm::message::Request_GetPsCapRequest*>(&::aesm::message::Request_GetPsCapRequest::default_instance());
  getwhitelistsizereq_ = const_cast< ::aesm::message::Request_GetWhiteListSizeRequest*>(&::aesm::message::Request_GetWhiteListSizeRequest::default_instance());
  getwhitelistreq_ = const_cast< ::aesm::message::Request_GetWhiteListRequest*>(&::aesm::message::Request_GetWhiteListRequest::default_instance());
  sgxgetextendedepidgroupidreq_ = const_cast< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest*>(&::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::default_instance());
  sgxswitchextendedepidgroupreq_ = const_cast< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest*>(&::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::default_instance());
  sgxregisterreq_ = const_cast< ::aesm::message::Request_SGXRegisterRequest*>(&::aesm::message::Request_SGXRegisterRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  initquotereq_ = NULL;
  getquotereq_ = NULL;
  getlictokenreq_ = NULL;
  reporterrreq_ = NULL;
  createsessionreq_ = NULL;
  invokeservicereq_ = NULL;
  exchangereportreq_ = NULL;
  closesessionreq_ = NULL;
  getpscapreq_ = NULL;
  getwhitelistsizereq_ = NULL;
  getwhitelistreq_ = NULL;
  sgxgetextendedepidgroupidreq_ = NULL;
  sgxswitchextendedepidgroupreq_ = NULL;
  sgxregisterreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:aesm.message.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete initquotereq_;
    delete getquotereq_;
    delete getlictokenreq_;
    delete reporterrreq_;
    delete createsessionreq_;
    delete invokeservicereq_;
    delete exchangereportreq_;
    delete closesessionreq_;
    delete getpscapreq_;
    delete getwhitelistsizereq_;
    delete getwhitelistreq_;
    delete sgxgetextendedepidgroupidreq_;
    delete sgxswitchextendedepidgroupreq_;
    delete sgxregisterreq_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_initquotereq()) {
      if (initquotereq_ != NULL) initquotereq_->::aesm::message::Request_InitQuoteRequest::Clear();
    }
    if (has_getquotereq()) {
      if (getquotereq_ != NULL) getquotereq_->::aesm::message::Request_GetQuoteRequest::Clear();
    }
    if (has_getlictokenreq()) {
      if (getlictokenreq_ != NULL) getlictokenreq_->::aesm::message::Request_GetLaunchTokenRequest::Clear();
    }
    if (has_reporterrreq()) {
      if (reporterrreq_ != NULL) reporterrreq_->::aesm::message::Request_ReportAttestationErrorRequest::Clear();
    }
    if (has_createsessionreq()) {
      if (createsessionreq_ != NULL) createsessionreq_->::aesm::message::Request_CreateSessionRequest::Clear();
    }
    if (has_invokeservicereq()) {
      if (invokeservicereq_ != NULL) invokeservicereq_->::aesm::message::Request_InvokeServiceRequest::Clear();
    }
    if (has_exchangereportreq()) {
      if (exchangereportreq_ != NULL) exchangereportreq_->::aesm::message::Request_ExchangeReportRequest::Clear();
    }
    if (has_closesessionreq()) {
      if (closesessionreq_ != NULL) closesessionreq_->::aesm::message::Request_CloseSessionRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_getpscapreq()) {
      if (getpscapreq_ != NULL) getpscapreq_->::aesm::message::Request_GetPsCapRequest::Clear();
    }
    if (has_getwhitelistsizereq()) {
      if (getwhitelistsizereq_ != NULL) getwhitelistsizereq_->::aesm::message::Request_GetWhiteListSizeRequest::Clear();
    }
    if (has_getwhitelistreq()) {
      if (getwhitelistreq_ != NULL) getwhitelistreq_->::aesm::message::Request_GetWhiteListRequest::Clear();
    }
    if (has_sgxgetextendedepidgroupidreq()) {
      if (sgxgetextendedepidgroupidreq_ != NULL) sgxgetextendedepidgroupidreq_->::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::Clear();
    }
    if (has_sgxswitchextendedepidgroupreq()) {
      if (sgxswitchextendedepidgroupreq_ != NULL) sgxswitchextendedepidgroupreq_->::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::Clear();
    }
    if (has_sgxregisterreq()) {
      if (sgxregisterreq_ != NULL) sgxregisterreq_->::aesm::message::Request_SGXRegisterRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initquotereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getQuoteReq;
        break;
      }

      // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
      case 2: {
        if (tag == 18) {
         parse_getQuoteReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquotereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getLicTokenReq;
        break;
      }

      // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
      case 3: {
        if (tag == 26) {
         parse_getLicTokenReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getlictokenreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reportErrReq;
        break;
      }

      // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
      case 4: {
        if (tag == 34) {
         parse_reportErrReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reporterrreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_createSessionReq;
        break;
      }

      // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
      case 5: {
        if (tag == 42) {
         parse_createSessionReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createsessionreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_invokeServiceReq;
        break;
      }

      // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
      case 6: {
        if (tag == 50) {
         parse_invokeServiceReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invokeservicereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_exchangeReportReq;
        break;
      }

      // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
      case 7: {
        if (tag == 58) {
         parse_exchangeReportReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchangereportreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_closeSessionReq;
        break;
      }

      // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
      case 8: {
        if (tag == 66) {
         parse_closeSessionReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closesessionreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_getPsCapReq;
        break;
      }

      // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
      case 9: {
        if (tag == 74) {
         parse_getPsCapReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpscapreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_getWhiteListSizeReq;
        break;
      }

      // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
      case 10: {
        if (tag == 82) {
         parse_getWhiteListSizeReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistsizereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_getWhiteListReq;
        break;
      }

      // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
      case 11: {
        if (tag == 90) {
         parse_getWhiteListReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sgxGetExtendedEpidGroupIdReq;
        break;
      }

      // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
      case 12: {
        if (tag == 98) {
         parse_sgxGetExtendedEpidGroupIdReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxgetextendedepidgroupidreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sgxSwitchExtendedEpidGroupReq;
        break;
      }

      // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
      case 13: {
        if (tag == 106) {
         parse_sgxSwitchExtendedEpidGroupReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxswitchextendedepidgroupreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sgxRegisterReq;
        break;
      }

      // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
      case 14: {
        if (tag == 114) {
         parse_sgxRegisterReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxregisterreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request)
  // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
  if (has_initquotereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->initquotereq_, output);
  }

  // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
  if (has_getquotereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->getquotereq_, output);
  }

  // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
  if (has_getlictokenreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->getlictokenreq_, output);
  }

  // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
  if (has_reporterrreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->reporterrreq_, output);
  }

  // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
  if (has_createsessionreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->createsessionreq_, output);
  }

  // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
  if (has_invokeservicereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->invokeservicereq_, output);
  }

  // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
  if (has_exchangereportreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->exchangereportreq_, output);
  }

  // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
  if (has_closesessionreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->closesessionreq_, output);
  }

  // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
  if (has_getpscapreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->getpscapreq_, output);
  }

  // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
  if (has_getwhitelistsizereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->getwhitelistsizereq_, output);
  }

  // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
  if (has_getwhitelistreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->getwhitelistreq_, output);
  }

  // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
  if (has_sgxgetextendedepidgroupidreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->sgxgetextendedepidgroupidreq_, output);
  }

  // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
  if (has_sgxswitchextendedepidgroupreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->sgxswitchextendedepidgroupreq_, output);
  }

  // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
  if (has_sgxregisterreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->sgxregisterreq_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request)
  // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
  if (has_initquotereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->initquotereq_, false, target);
  }

  // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
  if (has_getquotereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->getquotereq_, false, target);
  }

  // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
  if (has_getlictokenreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->getlictokenreq_, false, target);
  }

  // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
  if (has_reporterrreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->reporterrreq_, false, target);
  }

  // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
  if (has_createsessionreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->createsessionreq_, false, target);
  }

  // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
  if (has_invokeservicereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->invokeservicereq_, false, target);
  }

  // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
  if (has_exchangereportreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->exchangereportreq_, false, target);
  }

  // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
  if (has_closesessionreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->closesessionreq_, false, target);
  }

  // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
  if (has_getpscapreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->getpscapreq_, false, target);
  }

  // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
  if (has_getwhitelistsizereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->getwhitelistsizereq_, false, target);
  }

  // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
  if (has_getwhitelistreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->getwhitelistreq_, false, target);
  }

  // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
  if (has_sgxgetextendedepidgroupidreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->sgxgetextendedepidgroupidreq_, false, target);
  }

  // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
  if (has_sgxswitchextendedepidgroupreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->sgxswitchextendedepidgroupreq_, false, target);
  }

  // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
  if (has_sgxregisterreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->sgxregisterreq_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
    if (has_initquotereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initquotereq_);
    }

    // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
    if (has_getquotereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getquotereq_);
    }

    // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
    if (has_getlictokenreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getlictokenreq_);
    }

    // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
    if (has_reporterrreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reporterrreq_);
    }

    // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
    if (has_createsessionreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->createsessionreq_);
    }

    // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
    if (has_invokeservicereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->invokeservicereq_);
    }

    // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
    if (has_exchangereportreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exchangereportreq_);
    }

    // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
    if (has_closesessionreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->closesessionreq_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
    if (has_getpscapreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getpscapreq_);
    }

    // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
    if (has_getwhitelistsizereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getwhitelistsizereq_);
    }

    // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
    if (has_getwhitelistreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getwhitelistreq_);
    }

    // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
    if (has_sgxgetextendedepidgroupidreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sgxgetextendedepidgroupidreq_);
    }

    // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
    if (has_sgxswitchextendedepidgroupreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sgxswitchextendedepidgroupreq_);
    }

    // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
    if (has_sgxregisterreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sgxregisterreq_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initquotereq()) {
      mutable_initquotereq()->::aesm::message::Request_InitQuoteRequest::MergeFrom(from.initquotereq());
    }
    if (from.has_getquotereq()) {
      mutable_getquotereq()->::aesm::message::Request_GetQuoteRequest::MergeFrom(from.getquotereq());
    }
    if (from.has_getlictokenreq()) {
      mutable_getlictokenreq()->::aesm::message::Request_GetLaunchTokenRequest::MergeFrom(from.getlictokenreq());
    }
    if (from.has_reporterrreq()) {
      mutable_reporterrreq()->::aesm::message::Request_ReportAttestationErrorRequest::MergeFrom(from.reporterrreq());
    }
    if (from.has_createsessionreq()) {
      mutable_createsessionreq()->::aesm::message::Request_CreateSessionRequest::MergeFrom(from.createsessionreq());
    }
    if (from.has_invokeservicereq()) {
      mutable_invokeservicereq()->::aesm::message::Request_InvokeServiceRequest::MergeFrom(from.invokeservicereq());
    }
    if (from.has_exchangereportreq()) {
      mutable_exchangereportreq()->::aesm::message::Request_ExchangeReportRequest::MergeFrom(from.exchangereportreq());
    }
    if (from.has_closesessionreq()) {
      mutable_closesessionreq()->::aesm::message::Request_CloseSessionRequest::MergeFrom(from.closesessionreq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getpscapreq()) {
      mutable_getpscapreq()->::aesm::message::Request_GetPsCapRequest::MergeFrom(from.getpscapreq());
    }
    if (from.has_getwhitelistsizereq()) {
      mutable_getwhitelistsizereq()->::aesm::message::Request_GetWhiteListSizeRequest::MergeFrom(from.getwhitelistsizereq());
    }
    if (from.has_getwhitelistreq()) {
      mutable_getwhitelistreq()->::aesm::message::Request_GetWhiteListRequest::MergeFrom(from.getwhitelistreq());
    }
    if (from.has_sgxgetextendedepidgroupidreq()) {
      mutable_sgxgetextendedepidgroupidreq()->::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(from.sgxgetextendedepidgroupidreq());
    }
    if (from.has_sgxswitchextendedepidgroupreq()) {
      mutable_sgxswitchextendedepidgroupreq()->::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(from.sgxswitchextendedepidgroupreq());
    }
    if (from.has_sgxregisterreq()) {
      mutable_sgxregisterreq()->::aesm::message::Request_SGXRegisterRequest::MergeFrom(from.sgxregisterreq());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_getquotereq()) {
    if (!this->getquotereq_->IsInitialized()) return false;
  }
  if (has_getlictokenreq()) {
    if (!this->getlictokenreq_->IsInitialized()) return false;
  }
  if (has_reporterrreq()) {
    if (!this->reporterrreq_->IsInitialized()) return false;
  }
  if (has_createsessionreq()) {
    if (!this->createsessionreq_->IsInitialized()) return false;
  }
  if (has_invokeservicereq()) {
    if (!this->invokeservicereq_->IsInitialized()) return false;
  }
  if (has_exchangereportreq()) {
    if (!this->exchangereportreq_->IsInitialized()) return false;
  }
  if (has_closesessionreq()) {
    if (!this->closesessionreq_->IsInitialized()) return false;
  }
  if (has_sgxregisterreq()) {
    if (!this->sgxregisterreq_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(initquotereq_, other->initquotereq_);
  std::swap(getquotereq_, other->getquotereq_);
  std::swap(getlictokenreq_, other->getlictokenreq_);
  std::swap(reporterrreq_, other->reporterrreq_);
  std::swap(createsessionreq_, other->createsessionreq_);
  std::swap(invokeservicereq_, other->invokeservicereq_);
  std::swap(exchangereportreq_, other->exchangereportreq_);
  std::swap(closesessionreq_, other->closesessionreq_);
  std::swap(getpscapreq_, other->getpscapreq_);
  std::swap(getwhitelistsizereq_, other->getwhitelistsizereq_);
  std::swap(getwhitelistreq_, other->getwhitelistreq_);
  std::swap(sgxgetextendedepidgroupidreq_, other->sgxgetextendedepidgroupidreq_);
  std::swap(sgxswitchextendedepidgroupreq_, other->sgxswitchextendedepidgroupreq_);
  std::swap(sgxregisterreq_, other->sgxregisterreq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_InitQuoteRequest

// optional uint32 timeout = 9;
bool Request_InitQuoteRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_InitQuoteRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_InitQuoteRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_InitQuoteRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_InitQuoteRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InitQuoteRequest.timeout)
  return timeout_;
}
 void Request_InitQuoteRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.InitQuoteRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetQuoteRequest

// required bytes report = 1;
bool Request_GetQuoteRequest::has_report() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_GetQuoteRequest::set_has_report() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_GetQuoteRequest::clear_has_report() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_GetQuoteRequest::clear_report() {
  report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_report();
}
 const ::std::string& Request_GetQuoteRequest::report() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.report)
  return report_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_report(const ::std::string& value) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.report)
}
 void Request_GetQuoteRequest::set_report(const char* value) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.report)
}
 void Request_GetQuoteRequest::set_report(const void* value, size_t size) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.report)
}
 ::std::string* Request_GetQuoteRequest::mutable_report() {
  set_has_report();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.report)
  return report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_GetQuoteRequest::release_report() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.report)
  clear_has_report();
  return report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_allocated_report(::std::string* report) {
  if (report != NULL) {
    set_has_report();
  } else {
    clear_has_report();
  }
  report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.report)
}

// required uint32 quote_type = 2;
bool Request_GetQuoteRequest::has_quote_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_GetQuoteRequest::set_has_quote_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_GetQuoteRequest::clear_has_quote_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_GetQuoteRequest::clear_quote_type() {
  quote_type_ = 0u;
  clear_has_quote_type();
}
 ::google::protobuf::uint32 Request_GetQuoteRequest::quote_type() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.quote_type)
  return quote_type_;
}
 void Request_GetQuoteRequest::set_quote_type(::google::protobuf::uint32 value) {
  set_has_quote_type();
  quote_type_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.quote_type)
}

// required bytes spid = 3;
bool Request_GetQuoteRequest::has_spid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_GetQuoteRequest::set_has_spid() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_GetQuoteRequest::clear_has_spid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_GetQuoteRequest::clear_spid() {
  spid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spid();
}
 const ::std::string& Request_GetQuoteRequest::spid() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.spid)
  return spid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_spid(const ::std::string& value) {
  set_has_spid();
  spid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.spid)
}
 void Request_GetQuoteRequest::set_spid(const char* value) {
  set_has_spid();
  spid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.spid)
}
 void Request_GetQuoteRequest::set_spid(const void* value, size_t size) {
  set_has_spid();
  spid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.spid)
}
 ::std::string* Request_GetQuoteRequest::mutable_spid() {
  set_has_spid();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.spid)
  return spid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_GetQuoteRequest::release_spid() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.spid)
  clear_has_spid();
  return spid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_allocated_spid(::std::string* spid) {
  if (spid != NULL) {
    set_has_spid();
  } else {
    clear_has_spid();
  }
  spid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spid);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.spid)
}

// optional bytes nonce = 4;
bool Request_GetQuoteRequest::has_nonce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request_GetQuoteRequest::set_has_nonce() {
  _has_bits_[0] |= 0x00000008u;
}
void Request_GetQuoteRequest::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request_GetQuoteRequest::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nonce();
}
 const ::std::string& Request_GetQuoteRequest::nonce() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_nonce(const ::std::string& value) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.nonce)
}
 void Request_GetQuoteRequest::set_nonce(const char* value) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.nonce)
}
 void Request_GetQuoteRequest::set_nonce(const void* value, size_t size) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.nonce)
}
 ::std::string* Request_GetQuoteRequest::mutable_nonce() {
  set_has_nonce();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_GetQuoteRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.nonce)
  clear_has_nonce();
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    set_has_nonce();
  } else {
    clear_has_nonce();
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.nonce)
}

// optional bytes sig_rl = 5;
bool Request_GetQuoteRequest::has_sig_rl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request_GetQuoteRequest::set_has_sig_rl() {
  _has_bits_[0] |= 0x00000010u;
}
void Request_GetQuoteRequest::clear_has_sig_rl() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request_GetQuoteRequest::clear_sig_rl() {
  sig_rl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig_rl();
}
 const ::std::string& Request_GetQuoteRequest::sig_rl() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.sig_rl)
  return sig_rl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_sig_rl(const ::std::string& value) {
  set_has_sig_rl();
  sig_rl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.sig_rl)
}
 void Request_GetQuoteRequest::set_sig_rl(const char* value) {
  set_has_sig_rl();
  sig_rl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetQuoteRequest.sig_rl)
}
 void Request_GetQuoteRequest::set_sig_rl(const void* value, size_t size) {
  set_has_sig_rl();
  sig_rl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetQuoteRequest.sig_rl)
}
 ::std::string* Request_GetQuoteRequest::mutable_sig_rl() {
  set_has_sig_rl();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetQuoteRequest.sig_rl)
  return sig_rl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_GetQuoteRequest::release_sig_rl() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetQuoteRequest.sig_rl)
  clear_has_sig_rl();
  return sig_rl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetQuoteRequest::set_allocated_sig_rl(::std::string* sig_rl) {
  if (sig_rl != NULL) {
    set_has_sig_rl();
  } else {
    clear_has_sig_rl();
  }
  sig_rl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig_rl);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetQuoteRequest.sig_rl)
}

// required uint32 buf_size = 6;
bool Request_GetQuoteRequest::has_buf_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request_GetQuoteRequest::set_has_buf_size() {
  _has_bits_[0] |= 0x00000020u;
}
void Request_GetQuoteRequest::clear_has_buf_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request_GetQuoteRequest::clear_buf_size() {
  buf_size_ = 0u;
  clear_has_buf_size();
}
 ::google::protobuf::uint32 Request_GetQuoteRequest::buf_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.buf_size)
  return buf_size_;
}
 void Request_GetQuoteRequest::set_buf_size(::google::protobuf::uint32 value) {
  set_has_buf_size();
  buf_size_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.buf_size)
}

// optional bool qe_report = 7;
bool Request_GetQuoteRequest::has_qe_report() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request_GetQuoteRequest::set_has_qe_report() {
  _has_bits_[0] |= 0x00000040u;
}
void Request_GetQuoteRequest::clear_has_qe_report() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request_GetQuoteRequest::clear_qe_report() {
  qe_report_ = false;
  clear_has_qe_report();
}
 bool Request_GetQuoteRequest::qe_report() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.qe_report)
  return qe_report_;
}
 void Request_GetQuoteRequest::set_qe_report(bool value) {
  set_has_qe_report();
  qe_report_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.qe_report)
}

// optional uint32 timeout = 9;
bool Request_GetQuoteRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request_GetQuoteRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
void Request_GetQuoteRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request_GetQuoteRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_GetQuoteRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetQuoteRequest.timeout)
  return timeout_;
}
 void Request_GetQuoteRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetQuoteRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetLaunchTokenRequest

// required bytes mr_enclave = 1;
bool Request_GetLaunchTokenRequest::has_mr_enclave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_GetLaunchTokenRequest::set_has_mr_enclave() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_GetLaunchTokenRequest::clear_has_mr_enclave() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_GetLaunchTokenRequest::clear_mr_enclave() {
  mr_enclave_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mr_enclave();
}
 const ::std::string& Request_GetLaunchTokenRequest::mr_enclave() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
  return mr_enclave_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetLaunchTokenRequest::set_mr_enclave(const ::std::string& value) {
  set_has_mr_enclave();
  mr_enclave_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
 void Request_GetLaunchTokenRequest::set_mr_enclave(const char* value) {
  set_has_mr_enclave();
  mr_enclave_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
 void Request_GetLaunchTokenRequest::set_mr_enclave(const void* value, size_t size) {
  set_has_mr_enclave();
  mr_enclave_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}
 ::std::string* Request_GetLaunchTokenRequest::mutable_mr_enclave() {
  set_has_mr_enclave();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
  return mr_enclave_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_GetLaunchTokenRequest::release_mr_enclave() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
  clear_has_mr_enclave();
  return mr_enclave_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetLaunchTokenRequest::set_allocated_mr_enclave(::std::string* mr_enclave) {
  if (mr_enclave != NULL) {
    set_has_mr_enclave();
  } else {
    clear_has_mr_enclave();
  }
  mr_enclave_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mr_enclave);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetLaunchTokenRequest.mr_enclave)
}

// required bytes mr_signer = 2;
bool Request_GetLaunchTokenRequest::has_mr_signer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_GetLaunchTokenRequest::set_has_mr_signer() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_GetLaunchTokenRequest::clear_has_mr_signer() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_GetLaunchTokenRequest::clear_mr_signer() {
  mr_signer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mr_signer();
}
 const ::std::string& Request_GetLaunchTokenRequest::mr_signer() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
  return mr_signer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetLaunchTokenRequest::set_mr_signer(const ::std::string& value) {
  set_has_mr_signer();
  mr_signer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
 void Request_GetLaunchTokenRequest::set_mr_signer(const char* value) {
  set_has_mr_signer();
  mr_signer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
 void Request_GetLaunchTokenRequest::set_mr_signer(const void* value, size_t size) {
  set_has_mr_signer();
  mr_signer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}
 ::std::string* Request_GetLaunchTokenRequest::mutable_mr_signer() {
  set_has_mr_signer();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
  return mr_signer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_GetLaunchTokenRequest::release_mr_signer() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
  clear_has_mr_signer();
  return mr_signer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetLaunchTokenRequest::set_allocated_mr_signer(::std::string* mr_signer) {
  if (mr_signer != NULL) {
    set_has_mr_signer();
  } else {
    clear_has_mr_signer();
  }
  mr_signer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mr_signer);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetLaunchTokenRequest.mr_signer)
}

// required bytes se_attributes = 3;
bool Request_GetLaunchTokenRequest::has_se_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_GetLaunchTokenRequest::set_has_se_attributes() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_GetLaunchTokenRequest::clear_has_se_attributes() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_GetLaunchTokenRequest::clear_se_attributes() {
  se_attributes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_se_attributes();
}
 const ::std::string& Request_GetLaunchTokenRequest::se_attributes() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
  return se_attributes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetLaunchTokenRequest::set_se_attributes(const ::std::string& value) {
  set_has_se_attributes();
  se_attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
 void Request_GetLaunchTokenRequest::set_se_attributes(const char* value) {
  set_has_se_attributes();
  se_attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
 void Request_GetLaunchTokenRequest::set_se_attributes(const void* value, size_t size) {
  set_has_se_attributes();
  se_attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}
 ::std::string* Request_GetLaunchTokenRequest::mutable_se_attributes() {
  set_has_se_attributes();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
  return se_attributes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_GetLaunchTokenRequest::release_se_attributes() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
  clear_has_se_attributes();
  return se_attributes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_GetLaunchTokenRequest::set_allocated_se_attributes(::std::string* se_attributes) {
  if (se_attributes != NULL) {
    set_has_se_attributes();
  } else {
    clear_has_se_attributes();
  }
  se_attributes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_attributes);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.GetLaunchTokenRequest.se_attributes)
}

// optional uint32 timeout = 9;
bool Request_GetLaunchTokenRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request_GetLaunchTokenRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void Request_GetLaunchTokenRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request_GetLaunchTokenRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_GetLaunchTokenRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetLaunchTokenRequest.timeout)
  return timeout_;
}
 void Request_GetLaunchTokenRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetLaunchTokenRequest.timeout)
}

// -------------------------------------------------------------------

// Request_ReportAttestationErrorRequest

// required bytes platform_info = 1;
bool Request_ReportAttestationErrorRequest::has_platform_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_ReportAttestationErrorRequest::set_has_platform_info() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_ReportAttestationErrorRequest::clear_has_platform_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_ReportAttestationErrorRequest::clear_platform_info() {
  platform_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform_info();
}
 const ::std::string& Request_ReportAttestationErrorRequest::platform_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
  return platform_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_ReportAttestationErrorRequest::set_platform_info(const ::std::string& value) {
  set_has_platform_info();
  platform_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
 void Request_ReportAttestationErrorRequest::set_platform_info(const char* value) {
  set_has_platform_info();
  platform_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
 void Request_ReportAttestationErrorRequest::set_platform_info(const void* value, size_t size) {
  set_has_platform_info();
  platform_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}
 ::std::string* Request_ReportAttestationErrorRequest::mutable_platform_info() {
  set_has_platform_info();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
  return platform_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_ReportAttestationErrorRequest::release_platform_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
  clear_has_platform_info();
  return platform_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_ReportAttestationErrorRequest::set_allocated_platform_info(::std::string* platform_info) {
  if (platform_info != NULL) {
    set_has_platform_info();
  } else {
    clear_has_platform_info();
  }
  platform_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform_info);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.ReportAttestationErrorRequest.platform_info)
}

// required uint32 attestation_error_code = 2;
bool Request_ReportAttestationErrorRequest::has_attestation_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_ReportAttestationErrorRequest::set_has_attestation_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_ReportAttestationErrorRequest::clear_has_attestation_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_ReportAttestationErrorRequest::clear_attestation_error_code() {
  attestation_error_code_ = 0u;
  clear_has_attestation_error_code();
}
 ::google::protobuf::uint32 Request_ReportAttestationErrorRequest::attestation_error_code() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.attestation_error_code)
  return attestation_error_code_;
}
 void Request_ReportAttestationErrorRequest::set_attestation_error_code(::google::protobuf::uint32 value) {
  set_has_attestation_error_code();
  attestation_error_code_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.attestation_error_code)
}

// required uint32 update_info_size = 3;
bool Request_ReportAttestationErrorRequest::has_update_info_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_ReportAttestationErrorRequest::set_has_update_info_size() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_ReportAttestationErrorRequest::clear_has_update_info_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_ReportAttestationErrorRequest::clear_update_info_size() {
  update_info_size_ = 0u;
  clear_has_update_info_size();
}
 ::google::protobuf::uint32 Request_ReportAttestationErrorRequest::update_info_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.update_info_size)
  return update_info_size_;
}
 void Request_ReportAttestationErrorRequest::set_update_info_size(::google::protobuf::uint32 value) {
  set_has_update_info_size();
  update_info_size_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.update_info_size)
}

// optional uint32 timeout = 9;
bool Request_ReportAttestationErrorRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request_ReportAttestationErrorRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void Request_ReportAttestationErrorRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request_ReportAttestationErrorRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_ReportAttestationErrorRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ReportAttestationErrorRequest.timeout)
  return timeout_;
}
 void Request_ReportAttestationErrorRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.ReportAttestationErrorRequest.timeout)
}

// -------------------------------------------------------------------

// Request_CreateSessionRequest

// required uint32 dh_msg1_size = 1;
bool Request_CreateSessionRequest::has_dh_msg1_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_CreateSessionRequest::set_has_dh_msg1_size() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_CreateSessionRequest::clear_has_dh_msg1_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_CreateSessionRequest::clear_dh_msg1_size() {
  dh_msg1_size_ = 0u;
  clear_has_dh_msg1_size();
}
 ::google::protobuf::uint32 Request_CreateSessionRequest::dh_msg1_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CreateSessionRequest.dh_msg1_size)
  return dh_msg1_size_;
}
 void Request_CreateSessionRequest::set_dh_msg1_size(::google::protobuf::uint32 value) {
  set_has_dh_msg1_size();
  dh_msg1_size_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.CreateSessionRequest.dh_msg1_size)
}

// optional uint32 timeout = 9;
bool Request_CreateSessionRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_CreateSessionRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_CreateSessionRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_CreateSessionRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_CreateSessionRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CreateSessionRequest.timeout)
  return timeout_;
}
 void Request_CreateSessionRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.CreateSessionRequest.timeout)
}

// -------------------------------------------------------------------

// Request_InvokeServiceRequest

// required bytes pse_message = 1;
bool Request_InvokeServiceRequest::has_pse_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_InvokeServiceRequest::set_has_pse_message() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_InvokeServiceRequest::clear_has_pse_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_InvokeServiceRequest::clear_pse_message() {
  pse_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pse_message();
}
 const ::std::string& Request_InvokeServiceRequest::pse_message() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InvokeServiceRequest.pse_message)
  return pse_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_InvokeServiceRequest::set_pse_message(const ::std::string& value) {
  set_has_pse_message();
  pse_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.InvokeServiceRequest.pse_message)
}
 void Request_InvokeServiceRequest::set_pse_message(const char* value) {
  set_has_pse_message();
  pse_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.InvokeServiceRequest.pse_message)
}
 void Request_InvokeServiceRequest::set_pse_message(const void* value, size_t size) {
  set_has_pse_message();
  pse_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.InvokeServiceRequest.pse_message)
}
 ::std::string* Request_InvokeServiceRequest::mutable_pse_message() {
  set_has_pse_message();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.InvokeServiceRequest.pse_message)
  return pse_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_InvokeServiceRequest::release_pse_message() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.InvokeServiceRequest.pse_message)
  clear_has_pse_message();
  return pse_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_InvokeServiceRequest::set_allocated_pse_message(::std::string* pse_message) {
  if (pse_message != NULL) {
    set_has_pse_message();
  } else {
    clear_has_pse_message();
  }
  pse_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pse_message);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.InvokeServiceRequest.pse_message)
}

// required uint32 pse_resp_size = 2;
bool Request_InvokeServiceRequest::has_pse_resp_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_InvokeServiceRequest::set_has_pse_resp_size() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_InvokeServiceRequest::clear_has_pse_resp_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_InvokeServiceRequest::clear_pse_resp_size() {
  pse_resp_size_ = 0u;
  clear_has_pse_resp_size();
}
 ::google::protobuf::uint32 Request_InvokeServiceRequest::pse_resp_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InvokeServiceRequest.pse_resp_size)
  return pse_resp_size_;
}
 void Request_InvokeServiceRequest::set_pse_resp_size(::google::protobuf::uint32 value) {
  set_has_pse_resp_size();
  pse_resp_size_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.InvokeServiceRequest.pse_resp_size)
}

// optional uint32 timeout = 9;
bool Request_InvokeServiceRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_InvokeServiceRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_InvokeServiceRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_InvokeServiceRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_InvokeServiceRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.InvokeServiceRequest.timeout)
  return timeout_;
}
 void Request_InvokeServiceRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.InvokeServiceRequest.timeout)
}

// -------------------------------------------------------------------

// Request_ExchangeReportRequest

// required uint32 session_id = 1;
bool Request_ExchangeReportRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_ExchangeReportRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_ExchangeReportRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_ExchangeReportRequest::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 Request_ExchangeReportRequest::session_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ExchangeReportRequest.session_id)
  return session_id_;
}
 void Request_ExchangeReportRequest::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.ExchangeReportRequest.session_id)
}

// required bytes se_dh_msg2 = 2;
bool Request_ExchangeReportRequest::has_se_dh_msg2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_ExchangeReportRequest::set_has_se_dh_msg2() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_ExchangeReportRequest::clear_has_se_dh_msg2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_ExchangeReportRequest::clear_se_dh_msg2() {
  se_dh_msg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_se_dh_msg2();
}
 const ::std::string& Request_ExchangeReportRequest::se_dh_msg2() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ExchangeReportRequest.se_dh_msg2)
  return se_dh_msg2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_ExchangeReportRequest::set_se_dh_msg2(const ::std::string& value) {
  set_has_se_dh_msg2();
  se_dh_msg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.ExchangeReportRequest.se_dh_msg2)
}
 void Request_ExchangeReportRequest::set_se_dh_msg2(const char* value) {
  set_has_se_dh_msg2();
  se_dh_msg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.ExchangeReportRequest.se_dh_msg2)
}
 void Request_ExchangeReportRequest::set_se_dh_msg2(const void* value, size_t size) {
  set_has_se_dh_msg2();
  se_dh_msg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.ExchangeReportRequest.se_dh_msg2)
}
 ::std::string* Request_ExchangeReportRequest::mutable_se_dh_msg2() {
  set_has_se_dh_msg2();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.ExchangeReportRequest.se_dh_msg2)
  return se_dh_msg2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_ExchangeReportRequest::release_se_dh_msg2() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.ExchangeReportRequest.se_dh_msg2)
  clear_has_se_dh_msg2();
  return se_dh_msg2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_ExchangeReportRequest::set_allocated_se_dh_msg2(::std::string* se_dh_msg2) {
  if (se_dh_msg2 != NULL) {
    set_has_se_dh_msg2();
  } else {
    clear_has_se_dh_msg2();
  }
  se_dh_msg2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_dh_msg2);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.ExchangeReportRequest.se_dh_msg2)
}

// required uint32 se_dh_msg3_size = 3;
bool Request_ExchangeReportRequest::has_se_dh_msg3_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_ExchangeReportRequest::set_has_se_dh_msg3_size() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_ExchangeReportRequest::clear_has_se_dh_msg3_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_ExchangeReportRequest::clear_se_dh_msg3_size() {
  se_dh_msg3_size_ = 0u;
  clear_has_se_dh_msg3_size();
}
 ::google::protobuf::uint32 Request_ExchangeReportRequest::se_dh_msg3_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ExchangeReportRequest.se_dh_msg3_size)
  return se_dh_msg3_size_;
}
 void Request_ExchangeReportRequest::set_se_dh_msg3_size(::google::protobuf::uint32 value) {
  set_has_se_dh_msg3_size();
  se_dh_msg3_size_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.ExchangeReportRequest.se_dh_msg3_size)
}

// optional uint32 timeout = 9;
bool Request_ExchangeReportRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request_ExchangeReportRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void Request_ExchangeReportRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request_ExchangeReportRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_ExchangeReportRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.ExchangeReportRequest.timeout)
  return timeout_;
}
 void Request_ExchangeReportRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.ExchangeReportRequest.timeout)
}

// -------------------------------------------------------------------

// Request_CloseSessionRequest

// required uint32 session_id = 1;
bool Request_CloseSessionRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_CloseSessionRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_CloseSessionRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_CloseSessionRequest::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 Request_CloseSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CloseSessionRequest.session_id)
  return session_id_;
}
 void Request_CloseSessionRequest::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.CloseSessionRequest.session_id)
}

// optional uint32 timeout = 9;
bool Request_CloseSessionRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_CloseSessionRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_CloseSessionRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_CloseSessionRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_CloseSessionRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.CloseSessionRequest.timeout)
  return timeout_;
}
 void Request_CloseSessionRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.CloseSessionRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetPsCapRequest

// optional uint32 timeout = 9;
bool Request_GetPsCapRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_GetPsCapRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_GetPsCapRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_GetPsCapRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_GetPsCapRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetPsCapRequest.timeout)
  return timeout_;
}
 void Request_GetPsCapRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetPsCapRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetWhiteListSizeRequest

// optional uint32 timeout = 9;
bool Request_GetWhiteListSizeRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_GetWhiteListSizeRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_GetWhiteListSizeRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_GetWhiteListSizeRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_GetWhiteListSizeRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetWhiteListSizeRequest.timeout)
  return timeout_;
}
 void Request_GetWhiteListSizeRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetWhiteListSizeRequest.timeout)
}

// -------------------------------------------------------------------

// Request_GetWhiteListRequest

// optional uint32 white_list_size = 1;
bool Request_GetWhiteListRequest::has_white_list_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_GetWhiteListRequest::set_has_white_list_size() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_GetWhiteListRequest::clear_has_white_list_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_GetWhiteListRequest::clear_white_list_size() {
  white_list_size_ = 0u;
  clear_has_white_list_size();
}
 ::google::protobuf::uint32 Request_GetWhiteListRequest::white_list_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetWhiteListRequest.white_list_size)
  return white_list_size_;
}
 void Request_GetWhiteListRequest::set_white_list_size(::google::protobuf::uint32 value) {
  set_has_white_list_size();
  white_list_size_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetWhiteListRequest.white_list_size)
}

// optional uint32 timeout = 9;
bool Request_GetWhiteListRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_GetWhiteListRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_GetWhiteListRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_GetWhiteListRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_GetWhiteListRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.GetWhiteListRequest.timeout)
  return timeout_;
}
 void Request_GetWhiteListRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.GetWhiteListRequest.timeout)
}

// -------------------------------------------------------------------

// Request_SGXGetExtendedEpidGroupIdRequest

// optional uint32 timeout = 9;
bool Request_SGXGetExtendedEpidGroupIdRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_SGXGetExtendedEpidGroupIdRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_SGXGetExtendedEpidGroupIdRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_SGXGetExtendedEpidGroupIdRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_SGXGetExtendedEpidGroupIdRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest.timeout)
  return timeout_;
}
 void Request_SGXGetExtendedEpidGroupIdRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest.timeout)
}

// -------------------------------------------------------------------

// Request_SGXSwitchExtendedEpidGroupRequest

// optional uint32 x_group_id = 1;
bool Request_SGXSwitchExtendedEpidGroupRequest::has_x_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_SGXSwitchExtendedEpidGroupRequest::set_has_x_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_SGXSwitchExtendedEpidGroupRequest::clear_has_x_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_SGXSwitchExtendedEpidGroupRequest::clear_x_group_id() {
  x_group_id_ = 0u;
  clear_has_x_group_id();
}
 ::google::protobuf::uint32 Request_SGXSwitchExtendedEpidGroupRequest::x_group_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.x_group_id)
  return x_group_id_;
}
 void Request_SGXSwitchExtendedEpidGroupRequest::set_x_group_id(::google::protobuf::uint32 value) {
  set_has_x_group_id();
  x_group_id_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.x_group_id)
}

// optional uint32 timeout = 9;
bool Request_SGXSwitchExtendedEpidGroupRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_SGXSwitchExtendedEpidGroupRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_SGXSwitchExtendedEpidGroupRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_SGXSwitchExtendedEpidGroupRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_SGXSwitchExtendedEpidGroupRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.timeout)
  return timeout_;
}
 void Request_SGXSwitchExtendedEpidGroupRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest.timeout)
}

// -------------------------------------------------------------------

// Request_SGXRegisterRequest

// required bytes buf = 1;
bool Request_SGXRegisterRequest::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_SGXRegisterRequest::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_SGXRegisterRequest::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_SGXRegisterRequest::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buf();
}
 const ::std::string& Request_SGXRegisterRequest::buf() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXRegisterRequest.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_SGXRegisterRequest::set_buf(const ::std::string& value) {
  set_has_buf();
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXRegisterRequest.buf)
}
 void Request_SGXRegisterRequest::set_buf(const char* value) {
  set_has_buf();
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Request.SGXRegisterRequest.buf)
}
 void Request_SGXRegisterRequest::set_buf(const void* value, size_t size) {
  set_has_buf();
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Request.SGXRegisterRequest.buf)
}
 ::std::string* Request_SGXRegisterRequest::mutable_buf() {
  set_has_buf();
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.SGXRegisterRequest.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_SGXRegisterRequest::release_buf() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.SGXRegisterRequest.buf)
  clear_has_buf();
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_SGXRegisterRequest::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    set_has_buf();
  } else {
    clear_has_buf();
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.SGXRegisterRequest.buf)
}

// required uint32 data_type = 2;
bool Request_SGXRegisterRequest::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_SGXRegisterRequest::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_SGXRegisterRequest::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_SGXRegisterRequest::clear_data_type() {
  data_type_ = 0u;
  clear_has_data_type();
}
 ::google::protobuf::uint32 Request_SGXRegisterRequest::data_type() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXRegisterRequest.data_type)
  return data_type_;
}
 void Request_SGXRegisterRequest::set_data_type(::google::protobuf::uint32 value) {
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXRegisterRequest.data_type)
}

// optional uint32 timeout = 9;
bool Request_SGXRegisterRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_SGXRegisterRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_SGXRegisterRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_SGXRegisterRequest::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 Request_SGXRegisterRequest::timeout() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.SGXRegisterRequest.timeout)
  return timeout_;
}
 void Request_SGXRegisterRequest::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Request.SGXRegisterRequest.timeout)
}

// -------------------------------------------------------------------

// Request

// optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
bool Request::has_initquotereq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_initquotereq() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_initquotereq() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_initquotereq() {
  if (initquotereq_ != NULL) initquotereq_->::aesm::message::Request_InitQuoteRequest::Clear();
  clear_has_initquotereq();
}
const ::aesm::message::Request_InitQuoteRequest& Request::initquotereq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.initQuoteReq)
  return initquotereq_ != NULL ? *initquotereq_ : *default_instance_->initquotereq_;
}
::aesm::message::Request_InitQuoteRequest* Request::mutable_initquotereq() {
  set_has_initquotereq();
  if (initquotereq_ == NULL) {
    initquotereq_ = new ::aesm::message::Request_InitQuoteRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.initQuoteReq)
  return initquotereq_;
}
::aesm::message::Request_InitQuoteRequest* Request::release_initquotereq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.initQuoteReq)
  clear_has_initquotereq();
  ::aesm::message::Request_InitQuoteRequest* temp = initquotereq_;
  initquotereq_ = NULL;
  return temp;
}
void Request::set_allocated_initquotereq(::aesm::message::Request_InitQuoteRequest* initquotereq) {
  delete initquotereq_;
  initquotereq_ = initquotereq;
  if (initquotereq) {
    set_has_initquotereq();
  } else {
    clear_has_initquotereq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.initQuoteReq)
}

// optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
bool Request::has_getquotereq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_getquotereq() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_getquotereq() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_getquotereq() {
  if (getquotereq_ != NULL) getquotereq_->::aesm::message::Request_GetQuoteRequest::Clear();
  clear_has_getquotereq();
}
const ::aesm::message::Request_GetQuoteRequest& Request::getquotereq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getQuoteReq)
  return getquotereq_ != NULL ? *getquotereq_ : *default_instance_->getquotereq_;
}
::aesm::message::Request_GetQuoteRequest* Request::mutable_getquotereq() {
  set_has_getquotereq();
  if (getquotereq_ == NULL) {
    getquotereq_ = new ::aesm::message::Request_GetQuoteRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getQuoteReq)
  return getquotereq_;
}
::aesm::message::Request_GetQuoteRequest* Request::release_getquotereq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getQuoteReq)
  clear_has_getquotereq();
  ::aesm::message::Request_GetQuoteRequest* temp = getquotereq_;
  getquotereq_ = NULL;
  return temp;
}
void Request::set_allocated_getquotereq(::aesm::message::Request_GetQuoteRequest* getquotereq) {
  delete getquotereq_;
  getquotereq_ = getquotereq;
  if (getquotereq) {
    set_has_getquotereq();
  } else {
    clear_has_getquotereq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getQuoteReq)
}

// optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
bool Request::has_getlictokenreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_getlictokenreq() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_getlictokenreq() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_getlictokenreq() {
  if (getlictokenreq_ != NULL) getlictokenreq_->::aesm::message::Request_GetLaunchTokenRequest::Clear();
  clear_has_getlictokenreq();
}
const ::aesm::message::Request_GetLaunchTokenRequest& Request::getlictokenreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getLicTokenReq)
  return getlictokenreq_ != NULL ? *getlictokenreq_ : *default_instance_->getlictokenreq_;
}
::aesm::message::Request_GetLaunchTokenRequest* Request::mutable_getlictokenreq() {
  set_has_getlictokenreq();
  if (getlictokenreq_ == NULL) {
    getlictokenreq_ = new ::aesm::message::Request_GetLaunchTokenRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getLicTokenReq)
  return getlictokenreq_;
}
::aesm::message::Request_GetLaunchTokenRequest* Request::release_getlictokenreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getLicTokenReq)
  clear_has_getlictokenreq();
  ::aesm::message::Request_GetLaunchTokenRequest* temp = getlictokenreq_;
  getlictokenreq_ = NULL;
  return temp;
}
void Request::set_allocated_getlictokenreq(::aesm::message::Request_GetLaunchTokenRequest* getlictokenreq) {
  delete getlictokenreq_;
  getlictokenreq_ = getlictokenreq;
  if (getlictokenreq) {
    set_has_getlictokenreq();
  } else {
    clear_has_getlictokenreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getLicTokenReq)
}

// optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
bool Request::has_reporterrreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_reporterrreq() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_reporterrreq() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_reporterrreq() {
  if (reporterrreq_ != NULL) reporterrreq_->::aesm::message::Request_ReportAttestationErrorRequest::Clear();
  clear_has_reporterrreq();
}
const ::aesm::message::Request_ReportAttestationErrorRequest& Request::reporterrreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.reportErrReq)
  return reporterrreq_ != NULL ? *reporterrreq_ : *default_instance_->reporterrreq_;
}
::aesm::message::Request_ReportAttestationErrorRequest* Request::mutable_reporterrreq() {
  set_has_reporterrreq();
  if (reporterrreq_ == NULL) {
    reporterrreq_ = new ::aesm::message::Request_ReportAttestationErrorRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.reportErrReq)
  return reporterrreq_;
}
::aesm::message::Request_ReportAttestationErrorRequest* Request::release_reporterrreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.reportErrReq)
  clear_has_reporterrreq();
  ::aesm::message::Request_ReportAttestationErrorRequest* temp = reporterrreq_;
  reporterrreq_ = NULL;
  return temp;
}
void Request::set_allocated_reporterrreq(::aesm::message::Request_ReportAttestationErrorRequest* reporterrreq) {
  delete reporterrreq_;
  reporterrreq_ = reporterrreq;
  if (reporterrreq) {
    set_has_reporterrreq();
  } else {
    clear_has_reporterrreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.reportErrReq)
}

// optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
bool Request::has_createsessionreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_createsessionreq() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_createsessionreq() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_createsessionreq() {
  if (createsessionreq_ != NULL) createsessionreq_->::aesm::message::Request_CreateSessionRequest::Clear();
  clear_has_createsessionreq();
}
const ::aesm::message::Request_CreateSessionRequest& Request::createsessionreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.createSessionReq)
  return createsessionreq_ != NULL ? *createsessionreq_ : *default_instance_->createsessionreq_;
}
::aesm::message::Request_CreateSessionRequest* Request::mutable_createsessionreq() {
  set_has_createsessionreq();
  if (createsessionreq_ == NULL) {
    createsessionreq_ = new ::aesm::message::Request_CreateSessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.createSessionReq)
  return createsessionreq_;
}
::aesm::message::Request_CreateSessionRequest* Request::release_createsessionreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.createSessionReq)
  clear_has_createsessionreq();
  ::aesm::message::Request_CreateSessionRequest* temp = createsessionreq_;
  createsessionreq_ = NULL;
  return temp;
}
void Request::set_allocated_createsessionreq(::aesm::message::Request_CreateSessionRequest* createsessionreq) {
  delete createsessionreq_;
  createsessionreq_ = createsessionreq;
  if (createsessionreq) {
    set_has_createsessionreq();
  } else {
    clear_has_createsessionreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.createSessionReq)
}

// optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
bool Request::has_invokeservicereq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_invokeservicereq() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_invokeservicereq() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_invokeservicereq() {
  if (invokeservicereq_ != NULL) invokeservicereq_->::aesm::message::Request_InvokeServiceRequest::Clear();
  clear_has_invokeservicereq();
}
const ::aesm::message::Request_InvokeServiceRequest& Request::invokeservicereq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.invokeServiceReq)
  return invokeservicereq_ != NULL ? *invokeservicereq_ : *default_instance_->invokeservicereq_;
}
::aesm::message::Request_InvokeServiceRequest* Request::mutable_invokeservicereq() {
  set_has_invokeservicereq();
  if (invokeservicereq_ == NULL) {
    invokeservicereq_ = new ::aesm::message::Request_InvokeServiceRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.invokeServiceReq)
  return invokeservicereq_;
}
::aesm::message::Request_InvokeServiceRequest* Request::release_invokeservicereq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.invokeServiceReq)
  clear_has_invokeservicereq();
  ::aesm::message::Request_InvokeServiceRequest* temp = invokeservicereq_;
  invokeservicereq_ = NULL;
  return temp;
}
void Request::set_allocated_invokeservicereq(::aesm::message::Request_InvokeServiceRequest* invokeservicereq) {
  delete invokeservicereq_;
  invokeservicereq_ = invokeservicereq;
  if (invokeservicereq) {
    set_has_invokeservicereq();
  } else {
    clear_has_invokeservicereq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.invokeServiceReq)
}

// optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
bool Request::has_exchangereportreq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_exchangereportreq() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_exchangereportreq() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_exchangereportreq() {
  if (exchangereportreq_ != NULL) exchangereportreq_->::aesm::message::Request_ExchangeReportRequest::Clear();
  clear_has_exchangereportreq();
}
const ::aesm::message::Request_ExchangeReportRequest& Request::exchangereportreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.exchangeReportReq)
  return exchangereportreq_ != NULL ? *exchangereportreq_ : *default_instance_->exchangereportreq_;
}
::aesm::message::Request_ExchangeReportRequest* Request::mutable_exchangereportreq() {
  set_has_exchangereportreq();
  if (exchangereportreq_ == NULL) {
    exchangereportreq_ = new ::aesm::message::Request_ExchangeReportRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.exchangeReportReq)
  return exchangereportreq_;
}
::aesm::message::Request_ExchangeReportRequest* Request::release_exchangereportreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.exchangeReportReq)
  clear_has_exchangereportreq();
  ::aesm::message::Request_ExchangeReportRequest* temp = exchangereportreq_;
  exchangereportreq_ = NULL;
  return temp;
}
void Request::set_allocated_exchangereportreq(::aesm::message::Request_ExchangeReportRequest* exchangereportreq) {
  delete exchangereportreq_;
  exchangereportreq_ = exchangereportreq;
  if (exchangereportreq) {
    set_has_exchangereportreq();
  } else {
    clear_has_exchangereportreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.exchangeReportReq)
}

// optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
bool Request::has_closesessionreq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_closesessionreq() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_closesessionreq() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_closesessionreq() {
  if (closesessionreq_ != NULL) closesessionreq_->::aesm::message::Request_CloseSessionRequest::Clear();
  clear_has_closesessionreq();
}
const ::aesm::message::Request_CloseSessionRequest& Request::closesessionreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.closeSessionReq)
  return closesessionreq_ != NULL ? *closesessionreq_ : *default_instance_->closesessionreq_;
}
::aesm::message::Request_CloseSessionRequest* Request::mutable_closesessionreq() {
  set_has_closesessionreq();
  if (closesessionreq_ == NULL) {
    closesessionreq_ = new ::aesm::message::Request_CloseSessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.closeSessionReq)
  return closesessionreq_;
}
::aesm::message::Request_CloseSessionRequest* Request::release_closesessionreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.closeSessionReq)
  clear_has_closesessionreq();
  ::aesm::message::Request_CloseSessionRequest* temp = closesessionreq_;
  closesessionreq_ = NULL;
  return temp;
}
void Request::set_allocated_closesessionreq(::aesm::message::Request_CloseSessionRequest* closesessionreq) {
  delete closesessionreq_;
  closesessionreq_ = closesessionreq;
  if (closesessionreq) {
    set_has_closesessionreq();
  } else {
    clear_has_closesessionreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.closeSessionReq)
}

// optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
bool Request::has_getpscapreq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Request::set_has_getpscapreq() {
  _has_bits_[0] |= 0x00000100u;
}
void Request::clear_has_getpscapreq() {
  _has_bits_[0] &= ~0x00000100u;
}
void Request::clear_getpscapreq() {
  if (getpscapreq_ != NULL) getpscapreq_->::aesm::message::Request_GetPsCapRequest::Clear();
  clear_has_getpscapreq();
}
const ::aesm::message::Request_GetPsCapRequest& Request::getpscapreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getPsCapReq)
  return getpscapreq_ != NULL ? *getpscapreq_ : *default_instance_->getpscapreq_;
}
::aesm::message::Request_GetPsCapRequest* Request::mutable_getpscapreq() {
  set_has_getpscapreq();
  if (getpscapreq_ == NULL) {
    getpscapreq_ = new ::aesm::message::Request_GetPsCapRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getPsCapReq)
  return getpscapreq_;
}
::aesm::message::Request_GetPsCapRequest* Request::release_getpscapreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getPsCapReq)
  clear_has_getpscapreq();
  ::aesm::message::Request_GetPsCapRequest* temp = getpscapreq_;
  getpscapreq_ = NULL;
  return temp;
}
void Request::set_allocated_getpscapreq(::aesm::message::Request_GetPsCapRequest* getpscapreq) {
  delete getpscapreq_;
  getpscapreq_ = getpscapreq;
  if (getpscapreq) {
    set_has_getpscapreq();
  } else {
    clear_has_getpscapreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getPsCapReq)
}

// optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
bool Request::has_getwhitelistsizereq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Request::set_has_getwhitelistsizereq() {
  _has_bits_[0] |= 0x00000200u;
}
void Request::clear_has_getwhitelistsizereq() {
  _has_bits_[0] &= ~0x00000200u;
}
void Request::clear_getwhitelistsizereq() {
  if (getwhitelistsizereq_ != NULL) getwhitelistsizereq_->::aesm::message::Request_GetWhiteListSizeRequest::Clear();
  clear_has_getwhitelistsizereq();
}
const ::aesm::message::Request_GetWhiteListSizeRequest& Request::getwhitelistsizereq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getWhiteListSizeReq)
  return getwhitelistsizereq_ != NULL ? *getwhitelistsizereq_ : *default_instance_->getwhitelistsizereq_;
}
::aesm::message::Request_GetWhiteListSizeRequest* Request::mutable_getwhitelistsizereq() {
  set_has_getwhitelistsizereq();
  if (getwhitelistsizereq_ == NULL) {
    getwhitelistsizereq_ = new ::aesm::message::Request_GetWhiteListSizeRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getWhiteListSizeReq)
  return getwhitelistsizereq_;
}
::aesm::message::Request_GetWhiteListSizeRequest* Request::release_getwhitelistsizereq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getWhiteListSizeReq)
  clear_has_getwhitelistsizereq();
  ::aesm::message::Request_GetWhiteListSizeRequest* temp = getwhitelistsizereq_;
  getwhitelistsizereq_ = NULL;
  return temp;
}
void Request::set_allocated_getwhitelistsizereq(::aesm::message::Request_GetWhiteListSizeRequest* getwhitelistsizereq) {
  delete getwhitelistsizereq_;
  getwhitelistsizereq_ = getwhitelistsizereq;
  if (getwhitelistsizereq) {
    set_has_getwhitelistsizereq();
  } else {
    clear_has_getwhitelistsizereq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getWhiteListSizeReq)
}

// optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
bool Request::has_getwhitelistreq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Request::set_has_getwhitelistreq() {
  _has_bits_[0] |= 0x00000400u;
}
void Request::clear_has_getwhitelistreq() {
  _has_bits_[0] &= ~0x00000400u;
}
void Request::clear_getwhitelistreq() {
  if (getwhitelistreq_ != NULL) getwhitelistreq_->::aesm::message::Request_GetWhiteListRequest::Clear();
  clear_has_getwhitelistreq();
}
const ::aesm::message::Request_GetWhiteListRequest& Request::getwhitelistreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.getWhiteListReq)
  return getwhitelistreq_ != NULL ? *getwhitelistreq_ : *default_instance_->getwhitelistreq_;
}
::aesm::message::Request_GetWhiteListRequest* Request::mutable_getwhitelistreq() {
  set_has_getwhitelistreq();
  if (getwhitelistreq_ == NULL) {
    getwhitelistreq_ = new ::aesm::message::Request_GetWhiteListRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.getWhiteListReq)
  return getwhitelistreq_;
}
::aesm::message::Request_GetWhiteListRequest* Request::release_getwhitelistreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.getWhiteListReq)
  clear_has_getwhitelistreq();
  ::aesm::message::Request_GetWhiteListRequest* temp = getwhitelistreq_;
  getwhitelistreq_ = NULL;
  return temp;
}
void Request::set_allocated_getwhitelistreq(::aesm::message::Request_GetWhiteListRequest* getwhitelistreq) {
  delete getwhitelistreq_;
  getwhitelistreq_ = getwhitelistreq;
  if (getwhitelistreq) {
    set_has_getwhitelistreq();
  } else {
    clear_has_getwhitelistreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.getWhiteListReq)
}

// optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
bool Request::has_sgxgetextendedepidgroupidreq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Request::set_has_sgxgetextendedepidgroupidreq() {
  _has_bits_[0] |= 0x00000800u;
}
void Request::clear_has_sgxgetextendedepidgroupidreq() {
  _has_bits_[0] &= ~0x00000800u;
}
void Request::clear_sgxgetextendedepidgroupidreq() {
  if (sgxgetextendedepidgroupidreq_ != NULL) sgxgetextendedepidgroupidreq_->::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::Clear();
  clear_has_sgxgetextendedepidgroupidreq();
}
const ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest& Request::sgxgetextendedepidgroupidreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
  return sgxgetextendedepidgroupidreq_ != NULL ? *sgxgetextendedepidgroupidreq_ : *default_instance_->sgxgetextendedepidgroupidreq_;
}
::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Request::mutable_sgxgetextendedepidgroupidreq() {
  set_has_sgxgetextendedepidgroupidreq();
  if (sgxgetextendedepidgroupidreq_ == NULL) {
    sgxgetextendedepidgroupidreq_ = new ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
  return sgxgetextendedepidgroupidreq_;
}
::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Request::release_sgxgetextendedepidgroupidreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
  clear_has_sgxgetextendedepidgroupidreq();
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* temp = sgxgetextendedepidgroupidreq_;
  sgxgetextendedepidgroupidreq_ = NULL;
  return temp;
}
void Request::set_allocated_sgxgetextendedepidgroupidreq(::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* sgxgetextendedepidgroupidreq) {
  delete sgxgetextendedepidgroupidreq_;
  sgxgetextendedepidgroupidreq_ = sgxgetextendedepidgroupidreq;
  if (sgxgetextendedepidgroupidreq) {
    set_has_sgxgetextendedepidgroupidreq();
  } else {
    clear_has_sgxgetextendedepidgroupidreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.sgxGetExtendedEpidGroupIdReq)
}

// optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
bool Request::has_sgxswitchextendedepidgroupreq() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Request::set_has_sgxswitchextendedepidgroupreq() {
  _has_bits_[0] |= 0x00001000u;
}
void Request::clear_has_sgxswitchextendedepidgroupreq() {
  _has_bits_[0] &= ~0x00001000u;
}
void Request::clear_sgxswitchextendedepidgroupreq() {
  if (sgxswitchextendedepidgroupreq_ != NULL) sgxswitchextendedepidgroupreq_->::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::Clear();
  clear_has_sgxswitchextendedepidgroupreq();
}
const ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest& Request::sgxswitchextendedepidgroupreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
  return sgxswitchextendedepidgroupreq_ != NULL ? *sgxswitchextendedepidgroupreq_ : *default_instance_->sgxswitchextendedepidgroupreq_;
}
::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Request::mutable_sgxswitchextendedepidgroupreq() {
  set_has_sgxswitchextendedepidgroupreq();
  if (sgxswitchextendedepidgroupreq_ == NULL) {
    sgxswitchextendedepidgroupreq_ = new ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
  return sgxswitchextendedepidgroupreq_;
}
::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Request::release_sgxswitchextendedepidgroupreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
  clear_has_sgxswitchextendedepidgroupreq();
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* temp = sgxswitchextendedepidgroupreq_;
  sgxswitchextendedepidgroupreq_ = NULL;
  return temp;
}
void Request::set_allocated_sgxswitchextendedepidgroupreq(::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* sgxswitchextendedepidgroupreq) {
  delete sgxswitchextendedepidgroupreq_;
  sgxswitchextendedepidgroupreq_ = sgxswitchextendedepidgroupreq;
  if (sgxswitchextendedepidgroupreq) {
    set_has_sgxswitchextendedepidgroupreq();
  } else {
    clear_has_sgxswitchextendedepidgroupreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.sgxSwitchExtendedEpidGroupReq)
}

// optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
bool Request::has_sgxregisterreq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Request::set_has_sgxregisterreq() {
  _has_bits_[0] |= 0x00002000u;
}
void Request::clear_has_sgxregisterreq() {
  _has_bits_[0] &= ~0x00002000u;
}
void Request::clear_sgxregisterreq() {
  if (sgxregisterreq_ != NULL) sgxregisterreq_->::aesm::message::Request_SGXRegisterRequest::Clear();
  clear_has_sgxregisterreq();
}
const ::aesm::message::Request_SGXRegisterRequest& Request::sgxregisterreq() const {
  // @@protoc_insertion_point(field_get:aesm.message.Request.sgxRegisterReq)
  return sgxregisterreq_ != NULL ? *sgxregisterreq_ : *default_instance_->sgxregisterreq_;
}
::aesm::message::Request_SGXRegisterRequest* Request::mutable_sgxregisterreq() {
  set_has_sgxregisterreq();
  if (sgxregisterreq_ == NULL) {
    sgxregisterreq_ = new ::aesm::message::Request_SGXRegisterRequest;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Request.sgxRegisterReq)
  return sgxregisterreq_;
}
::aesm::message::Request_SGXRegisterRequest* Request::release_sgxregisterreq() {
  // @@protoc_insertion_point(field_release:aesm.message.Request.sgxRegisterReq)
  clear_has_sgxregisterreq();
  ::aesm::message::Request_SGXRegisterRequest* temp = sgxregisterreq_;
  sgxregisterreq_ = NULL;
  return temp;
}
void Request::set_allocated_sgxregisterreq(::aesm::message::Request_SGXRegisterRequest* sgxregisterreq) {
  delete sgxregisterreq_;
  sgxregisterreq_ = sgxregisterreq;
  if (sgxregisterreq) {
    set_has_sgxregisterreq();
  } else {
    clear_has_sgxregisterreq();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Request.sgxRegisterReq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_InitQuoteResponse::kErrorCodeFieldNumber;
const int Response_InitQuoteResponse::kTargetInfoFieldNumber;
const int Response_InitQuoteResponse::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_InitQuoteResponse::Response_InitQuoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.InitQuoteResponse)
}

void Response_InitQuoteResponse::InitAsDefaultInstance() {
}

Response_InitQuoteResponse::Response_InitQuoteResponse(const Response_InitQuoteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InitQuoteResponse)
}

void Response_InitQuoteResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  targetinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_InitQuoteResponse::~Response_InitQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InitQuoteResponse)
  SharedDtor();
}

void Response_InitQuoteResponse::SharedDtor() {
  targetinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_InitQuoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_InitQuoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_InitQuoteResponse_descriptor_;
}

const Response_InitQuoteResponse& Response_InitQuoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_InitQuoteResponse* Response_InitQuoteResponse::default_instance_ = NULL;

Response_InitQuoteResponse* Response_InitQuoteResponse::New(::google::protobuf::Arena* arena) const {
  Response_InitQuoteResponse* n = new Response_InitQuoteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_InitQuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.InitQuoteResponse)
  if (_has_bits_[0 / 32] & 7u) {
    errorcode_ = 1u;
    if (has_targetinfo()) {
      targetinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_gid()) {
      gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_InitQuoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.InitQuoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetInfo;
        break;
      }

      // optional bytes targetInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_targetInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gid;
        break;
      }

      // optional bytes gid = 3;
      case 3: {
        if (tag == 26) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.InitQuoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.InitQuoteResponse)
  return false;
#undef DO_
}

void Response_InitQuoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.InitQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes targetInfo = 2;
  if (has_targetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->targetinfo(), output);
  }

  // optional bytes gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.InitQuoteResponse)
}

::google::protobuf::uint8* Response_InitQuoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.InitQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes targetInfo = 2;
  if (has_targetinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->targetinfo(), target);
  }

  // optional bytes gid = 3;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.InitQuoteResponse)
  return target;
}

int Response_InitQuoteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.InitQuoteResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional bytes targetInfo = 2;
    if (has_targetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetinfo());
    }

    // optional bytes gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_InitQuoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.InitQuoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_InitQuoteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_InitQuoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.InitQuoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.InitQuoteResponse)
    MergeFrom(*source);
  }
}

void Response_InitQuoteResponse::MergeFrom(const Response_InitQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.InitQuoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_targetinfo()) {
      set_has_targetinfo();
      targetinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetinfo_);
    }
    if (from.has_gid()) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_InitQuoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.InitQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_InitQuoteResponse::CopyFrom(const Response_InitQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.InitQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InitQuoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_InitQuoteResponse::Swap(Response_InitQuoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_InitQuoteResponse::InternalSwap(Response_InitQuoteResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  targetinfo_.Swap(&other->targetinfo_);
  gid_.Swap(&other->gid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_InitQuoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_InitQuoteResponse_descriptor_;
  metadata.reflection = Response_InitQuoteResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetQuoteResponse::kErrorCodeFieldNumber;
const int Response_GetQuoteResponse::kQuoteFieldNumber;
const int Response_GetQuoteResponse::kQeReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetQuoteResponse::Response_GetQuoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetQuoteResponse)
}

void Response_GetQuoteResponse::InitAsDefaultInstance() {
}

Response_GetQuoteResponse::Response_GetQuoteResponse(const Response_GetQuoteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteResponse)
}

void Response_GetQuoteResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetQuoteResponse::~Response_GetQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteResponse)
  SharedDtor();
}

void Response_GetQuoteResponse::SharedDtor() {
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_GetQuoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetQuoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetQuoteResponse_descriptor_;
}

const Response_GetQuoteResponse& Response_GetQuoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_GetQuoteResponse* Response_GetQuoteResponse::default_instance_ = NULL;

Response_GetQuoteResponse* Response_GetQuoteResponse::New(::google::protobuf::Arena* arena) const {
  Response_GetQuoteResponse* n = new Response_GetQuoteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_GetQuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetQuoteResponse)
  if (_has_bits_[0 / 32] & 7u) {
    errorcode_ = 1u;
    if (has_quote()) {
      quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_qe_report()) {
      qe_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_GetQuoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetQuoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quote;
        break;
      }

      // optional bytes quote = 2;
      case 2: {
        if (tag == 18) {
         parse_quote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quote()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_qe_report;
        break;
      }

      // optional bytes qe_report = 3;
      case 3: {
        if (tag == 26) {
         parse_qe_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qe_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetQuoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetQuoteResponse)
  return false;
#undef DO_
}

void Response_GetQuoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes quote = 2;
  if (has_quote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->quote(), output);
  }

  // optional bytes qe_report = 3;
  if (has_qe_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qe_report(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetQuoteResponse)
}

::google::protobuf::uint8* Response_GetQuoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes quote = 2;
  if (has_quote()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->quote(), target);
  }

  // optional bytes qe_report = 3;
  if (has_qe_report()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->qe_report(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetQuoteResponse)
  return target;
}

int Response_GetQuoteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetQuoteResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional bytes quote = 2;
    if (has_quote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quote());
    }

    // optional bytes qe_report = 3;
    if (has_qe_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qe_report());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetQuoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.GetQuoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_GetQuoteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_GetQuoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.GetQuoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.GetQuoteResponse)
    MergeFrom(*source);
  }
}

void Response_GetQuoteResponse::MergeFrom(const Response_GetQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetQuoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_quote()) {
      set_has_quote();
      quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
    }
    if (from.has_qe_report()) {
      set_has_qe_report();
      qe_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qe_report_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_GetQuoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.GetQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetQuoteResponse::CopyFrom(const Response_GetQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetQuoteResponse::Swap(Response_GetQuoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetQuoteResponse::InternalSwap(Response_GetQuoteResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  quote_.Swap(&other->quote_);
  qe_report_.Swap(&other->qe_report_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_GetQuoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetQuoteResponse_descriptor_;
  metadata.reflection = Response_GetQuoteResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetLaunchTokenResponse::kErrorCodeFieldNumber;
const int Response_GetLaunchTokenResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetLaunchTokenResponse)
}

void Response_GetLaunchTokenResponse::InitAsDefaultInstance() {
}

Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse(const Response_GetLaunchTokenResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetLaunchTokenResponse)
}

void Response_GetLaunchTokenResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetLaunchTokenResponse::~Response_GetLaunchTokenResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetLaunchTokenResponse)
  SharedDtor();
}

void Response_GetLaunchTokenResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_GetLaunchTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetLaunchTokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetLaunchTokenResponse_descriptor_;
}

const Response_GetLaunchTokenResponse& Response_GetLaunchTokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_GetLaunchTokenResponse* Response_GetLaunchTokenResponse::default_instance_ = NULL;

Response_GetLaunchTokenResponse* Response_GetLaunchTokenResponse::New(::google::protobuf::Arena* arena) const {
  Response_GetLaunchTokenResponse* n = new Response_GetLaunchTokenResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_GetLaunchTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetLaunchTokenResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_GetLaunchTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetLaunchTokenResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetLaunchTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetLaunchTokenResponse)
  return false;
#undef DO_
}

void Response_GetLaunchTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetLaunchTokenResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetLaunchTokenResponse)
}

::google::protobuf::uint8* Response_GetLaunchTokenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetLaunchTokenResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetLaunchTokenResponse)
  return target;
}

int Response_GetLaunchTokenResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetLaunchTokenResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes token = 2;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->token());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetLaunchTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.GetLaunchTokenResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_GetLaunchTokenResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_GetLaunchTokenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.GetLaunchTokenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.GetLaunchTokenResponse)
    MergeFrom(*source);
  }
}

void Response_GetLaunchTokenResponse::MergeFrom(const Response_GetLaunchTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetLaunchTokenResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_GetLaunchTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.GetLaunchTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetLaunchTokenResponse::CopyFrom(const Response_GetLaunchTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetLaunchTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetLaunchTokenResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetLaunchTokenResponse::Swap(Response_GetLaunchTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetLaunchTokenResponse::InternalSwap(Response_GetLaunchTokenResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_GetLaunchTokenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetLaunchTokenResponse_descriptor_;
  metadata.reflection = Response_GetLaunchTokenResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_ReportAttestationErrorResponse::kErrorCodeFieldNumber;
const int Response_ReportAttestationErrorResponse::kPlatformUpdateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.ReportAttestationErrorResponse)
}

void Response_ReportAttestationErrorResponse::InitAsDefaultInstance() {
}

Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse(const Response_ReportAttestationErrorResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.ReportAttestationErrorResponse)
}

void Response_ReportAttestationErrorResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  platform_update_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_ReportAttestationErrorResponse::~Response_ReportAttestationErrorResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.ReportAttestationErrorResponse)
  SharedDtor();
}

void Response_ReportAttestationErrorResponse::SharedDtor() {
  platform_update_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_ReportAttestationErrorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ReportAttestationErrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ReportAttestationErrorResponse_descriptor_;
}

const Response_ReportAttestationErrorResponse& Response_ReportAttestationErrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_ReportAttestationErrorResponse* Response_ReportAttestationErrorResponse::default_instance_ = NULL;

Response_ReportAttestationErrorResponse* Response_ReportAttestationErrorResponse::New(::google::protobuf::Arena* arena) const {
  Response_ReportAttestationErrorResponse* n = new Response_ReportAttestationErrorResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_ReportAttestationErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.ReportAttestationErrorResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    if (has_platform_update_info()) {
      platform_update_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_ReportAttestationErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.ReportAttestationErrorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_update_info;
        break;
      }

      // optional bytes platform_update_info = 2;
      case 2: {
        if (tag == 18) {
         parse_platform_update_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_update_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.ReportAttestationErrorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.ReportAttestationErrorResponse)
  return false;
#undef DO_
}

void Response_ReportAttestationErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.ReportAttestationErrorResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->platform_update_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.ReportAttestationErrorResponse)
}

::google::protobuf::uint8* Response_ReportAttestationErrorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.ReportAttestationErrorResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->platform_update_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.ReportAttestationErrorResponse)
  return target;
}

int Response_ReportAttestationErrorResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.ReportAttestationErrorResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->platform_update_info());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ReportAttestationErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_ReportAttestationErrorResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_ReportAttestationErrorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.ReportAttestationErrorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.ReportAttestationErrorResponse)
    MergeFrom(*source);
  }
}

void Response_ReportAttestationErrorResponse::MergeFrom(const Response_ReportAttestationErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_platform_update_info()) {
      set_has_platform_update_info();
      platform_update_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_update_info_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_ReportAttestationErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ReportAttestationErrorResponse::CopyFrom(const Response_ReportAttestationErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ReportAttestationErrorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_ReportAttestationErrorResponse::Swap(Response_ReportAttestationErrorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_ReportAttestationErrorResponse::InternalSwap(Response_ReportAttestationErrorResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  platform_update_info_.Swap(&other->platform_update_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_ReportAttestationErrorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ReportAttestationErrorResponse_descriptor_;
  metadata.reflection = Response_ReportAttestationErrorResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_CreateSessionResponse::kErrorCodeFieldNumber;
const int Response_CreateSessionResponse::kSessionIdFieldNumber;
const int Response_CreateSessionResponse::kSeDhMsg1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_CreateSessionResponse::Response_CreateSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.CreateSessionResponse)
}

void Response_CreateSessionResponse::InitAsDefaultInstance() {
}

Response_CreateSessionResponse::Response_CreateSessionResponse(const Response_CreateSessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.CreateSessionResponse)
}

void Response_CreateSessionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  session_id_ = 0u;
  se_dh_msg1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_CreateSessionResponse::~Response_CreateSessionResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.CreateSessionResponse)
  SharedDtor();
}

void Response_CreateSessionResponse::SharedDtor() {
  se_dh_msg1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_CreateSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_CreateSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_CreateSessionResponse_descriptor_;
}

const Response_CreateSessionResponse& Response_CreateSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_CreateSessionResponse* Response_CreateSessionResponse::default_instance_ = NULL;

Response_CreateSessionResponse* Response_CreateSessionResponse::New(::google::protobuf::Arena* arena) const {
  Response_CreateSessionResponse* n = new Response_CreateSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_CreateSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.CreateSessionResponse)
  if (_has_bits_[0 / 32] & 7u) {
    errorcode_ = 1u;
    session_id_ = 0u;
    if (has_se_dh_msg1()) {
      se_dh_msg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_CreateSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.CreateSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_se_dh_msg1;
        break;
      }

      // optional bytes se_dh_msg1 = 3;
      case 3: {
        if (tag == 26) {
         parse_se_dh_msg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_dh_msg1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.CreateSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.CreateSessionResponse)
  return false;
#undef DO_
}

void Response_CreateSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.CreateSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // optional bytes se_dh_msg1 = 3;
  if (has_se_dh_msg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->se_dh_msg1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.CreateSessionResponse)
}

::google::protobuf::uint8* Response_CreateSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.CreateSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // optional bytes se_dh_msg1 = 3;
  if (has_se_dh_msg1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->se_dh_msg1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.CreateSessionResponse)
  return target;
}

int Response_CreateSessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.CreateSessionResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes se_dh_msg1 = 3;
    if (has_se_dh_msg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->se_dh_msg1());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_CreateSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.CreateSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_CreateSessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_CreateSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.CreateSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.CreateSessionResponse)
    MergeFrom(*source);
  }
}

void Response_CreateSessionResponse::MergeFrom(const Response_CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.CreateSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_se_dh_msg1()) {
      set_has_se_dh_msg1();
      se_dh_msg1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.se_dh_msg1_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_CreateSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_CreateSessionResponse::CopyFrom(const Response_CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CreateSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_CreateSessionResponse::Swap(Response_CreateSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_CreateSessionResponse::InternalSwap(Response_CreateSessionResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  std::swap(session_id_, other->session_id_);
  se_dh_msg1_.Swap(&other->se_dh_msg1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_CreateSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_CreateSessionResponse_descriptor_;
  metadata.reflection = Response_CreateSessionResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_InvokeServiceResponse::kErrorCodeFieldNumber;
const int Response_InvokeServiceResponse::kPseMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_InvokeServiceResponse::Response_InvokeServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.InvokeServiceResponse)
}

void Response_InvokeServiceResponse::InitAsDefaultInstance() {
}

Response_InvokeServiceResponse::Response_InvokeServiceResponse(const Response_InvokeServiceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InvokeServiceResponse)
}

void Response_InvokeServiceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  pse_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_InvokeServiceResponse::~Response_InvokeServiceResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InvokeServiceResponse)
  SharedDtor();
}

void Response_InvokeServiceResponse::SharedDtor() {
  pse_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_InvokeServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_InvokeServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_InvokeServiceResponse_descriptor_;
}

const Response_InvokeServiceResponse& Response_InvokeServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_InvokeServiceResponse* Response_InvokeServiceResponse::default_instance_ = NULL;

Response_InvokeServiceResponse* Response_InvokeServiceResponse::New(::google::protobuf::Arena* arena) const {
  Response_InvokeServiceResponse* n = new Response_InvokeServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_InvokeServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.InvokeServiceResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    if (has_pse_message()) {
      pse_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_InvokeServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.InvokeServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pse_message;
        break;
      }

      // optional bytes pse_message = 2;
      case 2: {
        if (tag == 18) {
         parse_pse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pse_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.InvokeServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.InvokeServiceResponse)
  return false;
#undef DO_
}

void Response_InvokeServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.InvokeServiceResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes pse_message = 2;
  if (has_pse_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pse_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.InvokeServiceResponse)
}

::google::protobuf::uint8* Response_InvokeServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.InvokeServiceResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes pse_message = 2;
  if (has_pse_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pse_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.InvokeServiceResponse)
  return target;
}

int Response_InvokeServiceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.InvokeServiceResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes pse_message = 2;
  if (has_pse_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pse_message());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_InvokeServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.InvokeServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_InvokeServiceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_InvokeServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.InvokeServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.InvokeServiceResponse)
    MergeFrom(*source);
  }
}

void Response_InvokeServiceResponse::MergeFrom(const Response_InvokeServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.InvokeServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_pse_message()) {
      set_has_pse_message();
      pse_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pse_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_InvokeServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.InvokeServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_InvokeServiceResponse::CopyFrom(const Response_InvokeServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.InvokeServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InvokeServiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_InvokeServiceResponse::Swap(Response_InvokeServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_InvokeServiceResponse::InternalSwap(Response_InvokeServiceResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  pse_message_.Swap(&other->pse_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_InvokeServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_InvokeServiceResponse_descriptor_;
  metadata.reflection = Response_InvokeServiceResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_ExchangeReportResponse::kErrorCodeFieldNumber;
const int Response_ExchangeReportResponse::kSeDhMsg3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_ExchangeReportResponse::Response_ExchangeReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.ExchangeReportResponse)
}

void Response_ExchangeReportResponse::InitAsDefaultInstance() {
}

Response_ExchangeReportResponse::Response_ExchangeReportResponse(const Response_ExchangeReportResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.ExchangeReportResponse)
}

void Response_ExchangeReportResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  se_dh_msg3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_ExchangeReportResponse::~Response_ExchangeReportResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.ExchangeReportResponse)
  SharedDtor();
}

void Response_ExchangeReportResponse::SharedDtor() {
  se_dh_msg3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_ExchangeReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ExchangeReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ExchangeReportResponse_descriptor_;
}

const Response_ExchangeReportResponse& Response_ExchangeReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_ExchangeReportResponse* Response_ExchangeReportResponse::default_instance_ = NULL;

Response_ExchangeReportResponse* Response_ExchangeReportResponse::New(::google::protobuf::Arena* arena) const {
  Response_ExchangeReportResponse* n = new Response_ExchangeReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_ExchangeReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.ExchangeReportResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    if (has_se_dh_msg3()) {
      se_dh_msg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_ExchangeReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.ExchangeReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_se_dh_msg3;
        break;
      }

      // optional bytes se_dh_msg3 = 2;
      case 2: {
        if (tag == 18) {
         parse_se_dh_msg3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_dh_msg3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.ExchangeReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.ExchangeReportResponse)
  return false;
#undef DO_
}

void Response_ExchangeReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.ExchangeReportResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes se_dh_msg3 = 2;
  if (has_se_dh_msg3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->se_dh_msg3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.ExchangeReportResponse)
}

::google::protobuf::uint8* Response_ExchangeReportResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.ExchangeReportResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes se_dh_msg3 = 2;
  if (has_se_dh_msg3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->se_dh_msg3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.ExchangeReportResponse)
  return target;
}

int Response_ExchangeReportResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.ExchangeReportResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes se_dh_msg3 = 2;
  if (has_se_dh_msg3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->se_dh_msg3());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ExchangeReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.ExchangeReportResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_ExchangeReportResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_ExchangeReportResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.ExchangeReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.ExchangeReportResponse)
    MergeFrom(*source);
  }
}

void Response_ExchangeReportResponse::MergeFrom(const Response_ExchangeReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.ExchangeReportResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_se_dh_msg3()) {
      set_has_se_dh_msg3();
      se_dh_msg3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.se_dh_msg3_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_ExchangeReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.ExchangeReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ExchangeReportResponse::CopyFrom(const Response_ExchangeReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.ExchangeReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ExchangeReportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_ExchangeReportResponse::Swap(Response_ExchangeReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_ExchangeReportResponse::InternalSwap(Response_ExchangeReportResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  se_dh_msg3_.Swap(&other->se_dh_msg3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_ExchangeReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ExchangeReportResponse_descriptor_;
  metadata.reflection = Response_ExchangeReportResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_CloseSessionResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_CloseSessionResponse::Response_CloseSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.CloseSessionResponse)
}

void Response_CloseSessionResponse::InitAsDefaultInstance() {
}

Response_CloseSessionResponse::Response_CloseSessionResponse(const Response_CloseSessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.CloseSessionResponse)
}

void Response_CloseSessionResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_CloseSessionResponse::~Response_CloseSessionResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.CloseSessionResponse)
  SharedDtor();
}

void Response_CloseSessionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_CloseSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_CloseSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_CloseSessionResponse_descriptor_;
}

const Response_CloseSessionResponse& Response_CloseSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_CloseSessionResponse* Response_CloseSessionResponse::default_instance_ = NULL;

Response_CloseSessionResponse* Response_CloseSessionResponse::New(::google::protobuf::Arena* arena) const {
  Response_CloseSessionResponse* n = new Response_CloseSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_CloseSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.CloseSessionResponse)
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_CloseSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.CloseSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.CloseSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.CloseSessionResponse)
  return false;
#undef DO_
}

void Response_CloseSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.CloseSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.CloseSessionResponse)
}

::google::protobuf::uint8* Response_CloseSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.CloseSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.CloseSessionResponse)
  return target;
}

int Response_CloseSessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.CloseSessionResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_CloseSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.CloseSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_CloseSessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_CloseSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.CloseSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.CloseSessionResponse)
    MergeFrom(*source);
  }
}

void Response_CloseSessionResponse::MergeFrom(const Response_CloseSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.CloseSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_CloseSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.CloseSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_CloseSessionResponse::CopyFrom(const Response_CloseSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.CloseSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CloseSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_CloseSessionResponse::Swap(Response_CloseSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_CloseSessionResponse::InternalSwap(Response_CloseSessionResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_CloseSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_CloseSessionResponse_descriptor_;
  metadata.reflection = Response_CloseSessionResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetPsCapResponse::kErrorCodeFieldNumber;
const int Response_GetPsCapResponse::kPsCapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetPsCapResponse::Response_GetPsCapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetPsCapResponse)
}

void Response_GetPsCapResponse::InitAsDefaultInstance() {
}

Response_GetPsCapResponse::Response_GetPsCapResponse(const Response_GetPsCapResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetPsCapResponse)
}

void Response_GetPsCapResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ps_cap_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetPsCapResponse::~Response_GetPsCapResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetPsCapResponse)
  SharedDtor();
}

void Response_GetPsCapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetPsCapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetPsCapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetPsCapResponse_descriptor_;
}

const Response_GetPsCapResponse& Response_GetPsCapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_GetPsCapResponse* Response_GetPsCapResponse::default_instance_ = NULL;

Response_GetPsCapResponse* Response_GetPsCapResponse::New(::google::protobuf::Arena* arena) const {
  Response_GetPsCapResponse* n = new Response_GetPsCapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_GetPsCapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetPsCapResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    ps_cap_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_GetPsCapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetPsCapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ps_cap;
        break;
      }

      // optional uint64 ps_cap = 2;
      case 2: {
        if (tag == 16) {
         parse_ps_cap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ps_cap_)));
          set_has_ps_cap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetPsCapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetPsCapResponse)
  return false;
#undef DO_
}

void Response_GetPsCapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetPsCapResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint64 ps_cap = 2;
  if (has_ps_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ps_cap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetPsCapResponse)
}

::google::protobuf::uint8* Response_GetPsCapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetPsCapResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint64 ps_cap = 2;
  if (has_ps_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ps_cap(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetPsCapResponse)
  return target;
}

int Response_GetPsCapResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetPsCapResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional uint64 ps_cap = 2;
  if (has_ps_cap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ps_cap());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetPsCapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.GetPsCapResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_GetPsCapResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_GetPsCapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.GetPsCapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.GetPsCapResponse)
    MergeFrom(*source);
  }
}

void Response_GetPsCapResponse::MergeFrom(const Response_GetPsCapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetPsCapResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_ps_cap()) {
      set_ps_cap(from.ps_cap());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_GetPsCapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.GetPsCapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetPsCapResponse::CopyFrom(const Response_GetPsCapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetPsCapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetPsCapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetPsCapResponse::Swap(Response_GetPsCapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetPsCapResponse::InternalSwap(Response_GetPsCapResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  std::swap(ps_cap_, other->ps_cap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_GetPsCapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetPsCapResponse_descriptor_;
  metadata.reflection = Response_GetPsCapResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetWhiteListSizeResponse::kErrorCodeFieldNumber;
const int Response_GetWhiteListSizeResponse::kWhiteListSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetWhiteListSizeResponse)
}

void Response_GetWhiteListSizeResponse::InitAsDefaultInstance() {
}

Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse(const Response_GetWhiteListSizeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListSizeResponse)
}

void Response_GetWhiteListSizeResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  white_list_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetWhiteListSizeResponse::~Response_GetWhiteListSizeResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListSizeResponse)
  SharedDtor();
}

void Response_GetWhiteListSizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetWhiteListSizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetWhiteListSizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetWhiteListSizeResponse_descriptor_;
}

const Response_GetWhiteListSizeResponse& Response_GetWhiteListSizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_GetWhiteListSizeResponse* Response_GetWhiteListSizeResponse::default_instance_ = NULL;

Response_GetWhiteListSizeResponse* Response_GetWhiteListSizeResponse::New(::google::protobuf::Arena* arena) const {
  Response_GetWhiteListSizeResponse* n = new Response_GetWhiteListSizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_GetWhiteListSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetWhiteListSizeResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    white_list_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_GetWhiteListSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetWhiteListSizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_white_list_size;
        break;
      }

      // optional uint32 white_list_size = 2;
      case 2: {
        if (tag == 16) {
         parse_white_list_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &white_list_size_)));
          set_has_white_list_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetWhiteListSizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetWhiteListSizeResponse)
  return false;
#undef DO_
}

void Response_GetWhiteListSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetWhiteListSizeResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 white_list_size = 2;
  if (has_white_list_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->white_list_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetWhiteListSizeResponse)
}

::google::protobuf::uint8* Response_GetWhiteListSizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetWhiteListSizeResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint32 white_list_size = 2;
  if (has_white_list_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->white_list_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetWhiteListSizeResponse)
  return target;
}

int Response_GetWhiteListSizeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetWhiteListSizeResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional uint32 white_list_size = 2;
  if (has_white_list_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->white_list_size());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetWhiteListSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_GetWhiteListSizeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_GetWhiteListSizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.GetWhiteListSizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.GetWhiteListSizeResponse)
    MergeFrom(*source);
  }
}

void Response_GetWhiteListSizeResponse::MergeFrom(const Response_GetWhiteListSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_white_list_size()) {
      set_white_list_size(from.white_list_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_GetWhiteListSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetWhiteListSizeResponse::CopyFrom(const Response_GetWhiteListSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListSizeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetWhiteListSizeResponse::Swap(Response_GetWhiteListSizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetWhiteListSizeResponse::InternalSwap(Response_GetWhiteListSizeResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  std::swap(white_list_size_, other->white_list_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_GetWhiteListSizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetWhiteListSizeResponse_descriptor_;
  metadata.reflection = Response_GetWhiteListSizeResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetWhiteListResponse::kErrorCodeFieldNumber;
const int Response_GetWhiteListResponse::kWhiteListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetWhiteListResponse::Response_GetWhiteListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetWhiteListResponse)
}

void Response_GetWhiteListResponse::InitAsDefaultInstance() {
}

Response_GetWhiteListResponse::Response_GetWhiteListResponse(const Response_GetWhiteListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListResponse)
}

void Response_GetWhiteListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  white_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetWhiteListResponse::~Response_GetWhiteListResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListResponse)
  SharedDtor();
}

void Response_GetWhiteListResponse::SharedDtor() {
  white_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_GetWhiteListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetWhiteListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetWhiteListResponse_descriptor_;
}

const Response_GetWhiteListResponse& Response_GetWhiteListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_GetWhiteListResponse* Response_GetWhiteListResponse::default_instance_ = NULL;

Response_GetWhiteListResponse* Response_GetWhiteListResponse::New(::google::protobuf::Arena* arena) const {
  Response_GetWhiteListResponse* n = new Response_GetWhiteListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_GetWhiteListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetWhiteListResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    if (has_white_list()) {
      white_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_GetWhiteListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetWhiteListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_white_list;
        break;
      }

      // optional bytes white_list = 2;
      case 2: {
        if (tag == 18) {
         parse_white_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_white_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetWhiteListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetWhiteListResponse)
  return false;
#undef DO_
}

void Response_GetWhiteListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetWhiteListResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes white_list = 2;
  if (has_white_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->white_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetWhiteListResponse)
}

::google::protobuf::uint8* Response_GetWhiteListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetWhiteListResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes white_list = 2;
  if (has_white_list()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->white_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetWhiteListResponse)
  return target;
}

int Response_GetWhiteListResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetWhiteListResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes white_list = 2;
  if (has_white_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->white_list());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetWhiteListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.GetWhiteListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_GetWhiteListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_GetWhiteListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.GetWhiteListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.GetWhiteListResponse)
    MergeFrom(*source);
  }
}

void Response_GetWhiteListResponse::MergeFrom(const Response_GetWhiteListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetWhiteListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_white_list()) {
      set_has_white_list();
      white_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.white_list_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_GetWhiteListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.GetWhiteListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetWhiteListResponse::CopyFrom(const Response_GetWhiteListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetWhiteListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetWhiteListResponse::Swap(Response_GetWhiteListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetWhiteListResponse::InternalSwap(Response_GetWhiteListResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  white_list_.Swap(&other->white_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_GetWhiteListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetWhiteListResponse_descriptor_;
  metadata.reflection = Response_GetWhiteListResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_SGXGetExtendedEpidGroupIdResponse::kErrorCodeFieldNumber;
const int Response_SGXGetExtendedEpidGroupIdResponse::kXGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

void Response_SGXGetExtendedEpidGroupIdResponse::InitAsDefaultInstance() {
}

Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse(const Response_SGXGetExtendedEpidGroupIdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  x_group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SGXGetExtendedEpidGroupIdResponse::~Response_SGXGetExtendedEpidGroupIdResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  SharedDtor();
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SGXGetExtendedEpidGroupIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SGXGetExtendedEpidGroupIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SGXGetExtendedEpidGroupIdResponse_descriptor_;
}

const Response_SGXGetExtendedEpidGroupIdResponse& Response_SGXGetExtendedEpidGroupIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_SGXGetExtendedEpidGroupIdResponse* Response_SGXGetExtendedEpidGroupIdResponse::default_instance_ = NULL;

Response_SGXGetExtendedEpidGroupIdResponse* Response_SGXGetExtendedEpidGroupIdResponse::New(::google::protobuf::Arena* arena) const {
  Response_SGXGetExtendedEpidGroupIdResponse* n = new Response_SGXGetExtendedEpidGroupIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_SGXGetExtendedEpidGroupIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  if (_has_bits_[0 / 32] & 3u) {
    errorcode_ = 1u;
    x_group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_SGXGetExtendedEpidGroupIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x_group_id;
        break;
      }

      // optional uint32 x_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_x_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_group_id_)));
          set_has_x_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return false;
#undef DO_
}

void Response_SGXGetExtendedEpidGroupIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 x_group_id = 2;
  if (has_x_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

::google::protobuf::uint8* Response_SGXGetExtendedEpidGroupIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint32 x_group_id = 2;
  if (has_x_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return target;
}

int Response_SGXGetExtendedEpidGroupIdResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional uint32 x_group_id = 2;
  if (has_x_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x_group_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_SGXGetExtendedEpidGroupIdResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_SGXGetExtendedEpidGroupIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
    MergeFrom(*source);
  }
}

void Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_x_group_id()) {
      set_x_group_id(from.x_group_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_SGXGetExtendedEpidGroupIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SGXGetExtendedEpidGroupIdResponse::CopyFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXGetExtendedEpidGroupIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_SGXGetExtendedEpidGroupIdResponse::Swap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_SGXGetExtendedEpidGroupIdResponse::InternalSwap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  std::swap(x_group_id_, other->x_group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_SGXGetExtendedEpidGroupIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SGXGetExtendedEpidGroupIdResponse_descriptor_;
  metadata.reflection = Response_SGXGetExtendedEpidGroupIdResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_SGXSwitchExtendedEpidGroupResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

void Response_SGXSwitchExtendedEpidGroupResponse::InitAsDefaultInstance() {
}

Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse(const Response_SGXSwitchExtendedEpidGroupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SGXSwitchExtendedEpidGroupResponse::~Response_SGXSwitchExtendedEpidGroupResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  SharedDtor();
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SGXSwitchExtendedEpidGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SGXSwitchExtendedEpidGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SGXSwitchExtendedEpidGroupResponse_descriptor_;
}

const Response_SGXSwitchExtendedEpidGroupResponse& Response_SGXSwitchExtendedEpidGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_SGXSwitchExtendedEpidGroupResponse* Response_SGXSwitchExtendedEpidGroupResponse::default_instance_ = NULL;

Response_SGXSwitchExtendedEpidGroupResponse* Response_SGXSwitchExtendedEpidGroupResponse::New(::google::protobuf::Arena* arena) const {
  Response_SGXSwitchExtendedEpidGroupResponse* n = new Response_SGXSwitchExtendedEpidGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_SGXSwitchExtendedEpidGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_SGXSwitchExtendedEpidGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return false;
#undef DO_
}

void Response_SGXSwitchExtendedEpidGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

::google::protobuf::uint8* Response_SGXSwitchExtendedEpidGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return target;
}

int Response_SGXSwitchExtendedEpidGroupResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_SGXSwitchExtendedEpidGroupResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_SGXSwitchExtendedEpidGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
    MergeFrom(*source);
  }
}

void Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_SGXSwitchExtendedEpidGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SGXSwitchExtendedEpidGroupResponse::CopyFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXSwitchExtendedEpidGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_SGXSwitchExtendedEpidGroupResponse::Swap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_SGXSwitchExtendedEpidGroupResponse::InternalSwap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_SGXSwitchExtendedEpidGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SGXSwitchExtendedEpidGroupResponse_descriptor_;
  metadata.reflection = Response_SGXSwitchExtendedEpidGroupResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_SGXRegisterResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_SGXRegisterResponse::Response_SGXRegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXRegisterResponse)
}

void Response_SGXRegisterResponse::InitAsDefaultInstance() {
}

Response_SGXRegisterResponse::Response_SGXRegisterResponse(const Response_SGXRegisterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXRegisterResponse)
}

void Response_SGXRegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SGXRegisterResponse::~Response_SGXRegisterResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXRegisterResponse)
  SharedDtor();
}

void Response_SGXRegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SGXRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SGXRegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SGXRegisterResponse_descriptor_;
}

const Response_SGXRegisterResponse& Response_SGXRegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response_SGXRegisterResponse* Response_SGXRegisterResponse::default_instance_ = NULL;

Response_SGXRegisterResponse* Response_SGXRegisterResponse::New(::google::protobuf::Arena* arena) const {
  Response_SGXRegisterResponse* n = new Response_SGXRegisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_SGXRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXRegisterResponse)
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response_SGXRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXRegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXRegisterResponse)
  return false;
#undef DO_
}

void Response_SGXRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXRegisterResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXRegisterResponse)
}

::google::protobuf::uint8* Response_SGXRegisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXRegisterResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXRegisterResponse)
  return target;
}

int Response_SGXRegisterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXRegisterResponse)
  int total_size = 0;

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SGXRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response.SGXRegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_SGXRegisterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_SGXRegisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response.SGXRegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response.SGXRegisterResponse)
    MergeFrom(*source);
  }
}

void Response_SGXRegisterResponse::MergeFrom(const Response_SGXRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXRegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response_SGXRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response.SGXRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SGXRegisterResponse::CopyFrom(const Response_SGXRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_SGXRegisterResponse::Swap(Response_SGXRegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_SGXRegisterResponse::InternalSwap(Response_SGXRegisterResponse* other) {
  std::swap(errorcode_, other->errorcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_SGXRegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SGXRegisterResponse_descriptor_;
  metadata.reflection = Response_SGXRegisterResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kInitQuoteResFieldNumber;
const int Response::kGetQuoteResFieldNumber;
const int Response::kGetLicTokenResFieldNumber;
const int Response::kReportErrResFieldNumber;
const int Response::kCreateSessionResFieldNumber;
const int Response::kInvokeServiceResFieldNumber;
const int Response::kExchangeReportResFieldNumber;
const int Response::kCloseSessionResFieldNumber;
const int Response::kGetPsCapResFieldNumber;
const int Response::kGetWhiteListSizeResFieldNumber;
const int Response::kGetWhiteListResFieldNumber;
const int Response::kSgxGetExtendedEpidGroupIdResFieldNumber;
const int Response::kSgxSwitchExtendedEpidGroupResFieldNumber;
const int Response::kSgxRegisterResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response)
}

void Response::InitAsDefaultInstance() {
  initquoteres_ = const_cast< ::aesm::message::Response_InitQuoteResponse*>(&::aesm::message::Response_InitQuoteResponse::default_instance());
  getquoteres_ = const_cast< ::aesm::message::Response_GetQuoteResponse*>(&::aesm::message::Response_GetQuoteResponse::default_instance());
  getlictokenres_ = const_cast< ::aesm::message::Response_GetLaunchTokenResponse*>(&::aesm::message::Response_GetLaunchTokenResponse::default_instance());
  reporterrres_ = const_cast< ::aesm::message::Response_ReportAttestationErrorResponse*>(&::aesm::message::Response_ReportAttestationErrorResponse::default_instance());
  createsessionres_ = const_cast< ::aesm::message::Response_CreateSessionResponse*>(&::aesm::message::Response_CreateSessionResponse::default_instance());
  invokeserviceres_ = const_cast< ::aesm::message::Response_InvokeServiceResponse*>(&::aesm::message::Response_InvokeServiceResponse::default_instance());
  exchangereportres_ = const_cast< ::aesm::message::Response_ExchangeReportResponse*>(&::aesm::message::Response_ExchangeReportResponse::default_instance());
  closesessionres_ = const_cast< ::aesm::message::Response_CloseSessionResponse*>(&::aesm::message::Response_CloseSessionResponse::default_instance());
  getpscapres_ = const_cast< ::aesm::message::Response_GetPsCapResponse*>(&::aesm::message::Response_GetPsCapResponse::default_instance());
  getwhitelistsizeres_ = const_cast< ::aesm::message::Response_GetWhiteListSizeResponse*>(&::aesm::message::Response_GetWhiteListSizeResponse::default_instance());
  getwhitelistres_ = const_cast< ::aesm::message::Response_GetWhiteListResponse*>(&::aesm::message::Response_GetWhiteListResponse::default_instance());
  sgxgetextendedepidgroupidres_ = const_cast< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse*>(&::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::default_instance());
  sgxswitchextendedepidgroupres_ = const_cast< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse*>(&::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::default_instance());
  sgxregisterres_ = const_cast< ::aesm::message::Response_SGXRegisterResponse*>(&::aesm::message::Response_SGXRegisterResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  initquoteres_ = NULL;
  getquoteres_ = NULL;
  getlictokenres_ = NULL;
  reporterrres_ = NULL;
  createsessionres_ = NULL;
  invokeserviceres_ = NULL;
  exchangereportres_ = NULL;
  closesessionres_ = NULL;
  getpscapres_ = NULL;
  getwhitelistsizeres_ = NULL;
  getwhitelistres_ = NULL;
  sgxgetextendedepidgroupidres_ = NULL;
  sgxswitchextendedepidgroupres_ = NULL;
  sgxregisterres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:aesm.message.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete initquoteres_;
    delete getquoteres_;
    delete getlictokenres_;
    delete reporterrres_;
    delete createsessionres_;
    delete invokeserviceres_;
    delete exchangereportres_;
    delete closesessionres_;
    delete getpscapres_;
    delete getwhitelistsizeres_;
    delete getwhitelistres_;
    delete sgxgetextendedepidgroupidres_;
    delete sgxswitchextendedepidgroupres_;
    delete sgxregisterres_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aesm_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_initquoteres()) {
      if (initquoteres_ != NULL) initquoteres_->::aesm::message::Response_InitQuoteResponse::Clear();
    }
    if (has_getquoteres()) {
      if (getquoteres_ != NULL) getquoteres_->::aesm::message::Response_GetQuoteResponse::Clear();
    }
    if (has_getlictokenres()) {
      if (getlictokenres_ != NULL) getlictokenres_->::aesm::message::Response_GetLaunchTokenResponse::Clear();
    }
    if (has_reporterrres()) {
      if (reporterrres_ != NULL) reporterrres_->::aesm::message::Response_ReportAttestationErrorResponse::Clear();
    }
    if (has_createsessionres()) {
      if (createsessionres_ != NULL) createsessionres_->::aesm::message::Response_CreateSessionResponse::Clear();
    }
    if (has_invokeserviceres()) {
      if (invokeserviceres_ != NULL) invokeserviceres_->::aesm::message::Response_InvokeServiceResponse::Clear();
    }
    if (has_exchangereportres()) {
      if (exchangereportres_ != NULL) exchangereportres_->::aesm::message::Response_ExchangeReportResponse::Clear();
    }
    if (has_closesessionres()) {
      if (closesessionres_ != NULL) closesessionres_->::aesm::message::Response_CloseSessionResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_getpscapres()) {
      if (getpscapres_ != NULL) getpscapres_->::aesm::message::Response_GetPsCapResponse::Clear();
    }
    if (has_getwhitelistsizeres()) {
      if (getwhitelistsizeres_ != NULL) getwhitelistsizeres_->::aesm::message::Response_GetWhiteListSizeResponse::Clear();
    }
    if (has_getwhitelistres()) {
      if (getwhitelistres_ != NULL) getwhitelistres_->::aesm::message::Response_GetWhiteListResponse::Clear();
    }
    if (has_sgxgetextendedepidgroupidres()) {
      if (sgxgetextendedepidgroupidres_ != NULL) sgxgetextendedepidgroupidres_->::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::Clear();
    }
    if (has_sgxswitchextendedepidgroupres()) {
      if (sgxswitchextendedepidgroupres_ != NULL) sgxswitchextendedepidgroupres_->::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::Clear();
    }
    if (has_sgxregisterres()) {
      if (sgxregisterres_ != NULL) sgxregisterres_->::aesm::message::Response_SGXRegisterResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initquoteres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getQuoteRes;
        break;
      }

      // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
      case 2: {
        if (tag == 18) {
         parse_getQuoteRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquoteres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getLicTokenRes;
        break;
      }

      // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
      case 3: {
        if (tag == 26) {
         parse_getLicTokenRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getlictokenres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reportErrRes;
        break;
      }

      // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
      case 4: {
        if (tag == 34) {
         parse_reportErrRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reporterrres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_createSessionRes;
        break;
      }

      // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
      case 5: {
        if (tag == 42) {
         parse_createSessionRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createsessionres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_invokeServiceRes;
        break;
      }

      // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
      case 6: {
        if (tag == 50) {
         parse_invokeServiceRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invokeserviceres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_exchangeReportRes;
        break;
      }

      // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
      case 7: {
        if (tag == 58) {
         parse_exchangeReportRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchangereportres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_closeSessionRes;
        break;
      }

      // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
      case 8: {
        if (tag == 66) {
         parse_closeSessionRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closesessionres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_getPsCapRes;
        break;
      }

      // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
      case 9: {
        if (tag == 74) {
         parse_getPsCapRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpscapres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_getWhiteListSizeRes;
        break;
      }

      // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
      case 10: {
        if (tag == 82) {
         parse_getWhiteListSizeRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistsizeres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_getWhiteListRes;
        break;
      }

      // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
      case 11: {
        if (tag == 90) {
         parse_getWhiteListRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sgxGetExtendedEpidGroupIdRes;
        break;
      }

      // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
      case 12: {
        if (tag == 98) {
         parse_sgxGetExtendedEpidGroupIdRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxgetextendedepidgroupidres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sgxSwitchExtendedEpidGroupRes;
        break;
      }

      // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
      case 13: {
        if (tag == 106) {
         parse_sgxSwitchExtendedEpidGroupRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxswitchextendedepidgroupres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sgxRegisterRes;
        break;
      }

      // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
      case 14: {
        if (tag == 114) {
         parse_sgxRegisterRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxregisterres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response)
  // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
  if (has_initquoteres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->initquoteres_, output);
  }

  // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
  if (has_getquoteres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->getquoteres_, output);
  }

  // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
  if (has_getlictokenres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->getlictokenres_, output);
  }

  // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
  if (has_reporterrres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->reporterrres_, output);
  }

  // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
  if (has_createsessionres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->createsessionres_, output);
  }

  // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
  if (has_invokeserviceres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->invokeserviceres_, output);
  }

  // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
  if (has_exchangereportres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->exchangereportres_, output);
  }

  // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
  if (has_closesessionres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->closesessionres_, output);
  }

  // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
  if (has_getpscapres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->getpscapres_, output);
  }

  // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
  if (has_getwhitelistsizeres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->getwhitelistsizeres_, output);
  }

  // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
  if (has_getwhitelistres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->getwhitelistres_, output);
  }

  // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
  if (has_sgxgetextendedepidgroupidres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->sgxgetextendedepidgroupidres_, output);
  }

  // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
  if (has_sgxswitchextendedepidgroupres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->sgxswitchextendedepidgroupres_, output);
  }

  // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
  if (has_sgxregisterres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->sgxregisterres_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response)
  // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
  if (has_initquoteres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->initquoteres_, false, target);
  }

  // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
  if (has_getquoteres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->getquoteres_, false, target);
  }

  // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
  if (has_getlictokenres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->getlictokenres_, false, target);
  }

  // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
  if (has_reporterrres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->reporterrres_, false, target);
  }

  // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
  if (has_createsessionres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->createsessionres_, false, target);
  }

  // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
  if (has_invokeserviceres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->invokeserviceres_, false, target);
  }

  // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
  if (has_exchangereportres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->exchangereportres_, false, target);
  }

  // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
  if (has_closesessionres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->closesessionres_, false, target);
  }

  // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
  if (has_getpscapres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->getpscapres_, false, target);
  }

  // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
  if (has_getwhitelistsizeres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->getwhitelistsizeres_, false, target);
  }

  // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
  if (has_getwhitelistres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->getwhitelistres_, false, target);
  }

  // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
  if (has_sgxgetextendedepidgroupidres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->sgxgetextendedepidgroupidres_, false, target);
  }

  // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
  if (has_sgxswitchextendedepidgroupres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->sgxswitchextendedepidgroupres_, false, target);
  }

  // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
  if (has_sgxregisterres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->sgxregisterres_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
    if (has_initquoteres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initquoteres_);
    }

    // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
    if (has_getquoteres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getquoteres_);
    }

    // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
    if (has_getlictokenres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getlictokenres_);
    }

    // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
    if (has_reporterrres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reporterrres_);
    }

    // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
    if (has_createsessionres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->createsessionres_);
    }

    // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
    if (has_invokeserviceres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->invokeserviceres_);
    }

    // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
    if (has_exchangereportres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exchangereportres_);
    }

    // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
    if (has_closesessionres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->closesessionres_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
    if (has_getpscapres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getpscapres_);
    }

    // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
    if (has_getwhitelistsizeres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getwhitelistsizeres_);
    }

    // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
    if (has_getwhitelistres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getwhitelistres_);
    }

    // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
    if (has_sgxgetextendedepidgroupidres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sgxgetextendedepidgroupidres_);
    }

    // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
    if (has_sgxswitchextendedepidgroupres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sgxswitchextendedepidgroupres_);
    }

    // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
    if (has_sgxregisterres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sgxregisterres_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesm.message.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesm.message.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesm.message.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initquoteres()) {
      mutable_initquoteres()->::aesm::message::Response_InitQuoteResponse::MergeFrom(from.initquoteres());
    }
    if (from.has_getquoteres()) {
      mutable_getquoteres()->::aesm::message::Response_GetQuoteResponse::MergeFrom(from.getquoteres());
    }
    if (from.has_getlictokenres()) {
      mutable_getlictokenres()->::aesm::message::Response_GetLaunchTokenResponse::MergeFrom(from.getlictokenres());
    }
    if (from.has_reporterrres()) {
      mutable_reporterrres()->::aesm::message::Response_ReportAttestationErrorResponse::MergeFrom(from.reporterrres());
    }
    if (from.has_createsessionres()) {
      mutable_createsessionres()->::aesm::message::Response_CreateSessionResponse::MergeFrom(from.createsessionres());
    }
    if (from.has_invokeserviceres()) {
      mutable_invokeserviceres()->::aesm::message::Response_InvokeServiceResponse::MergeFrom(from.invokeserviceres());
    }
    if (from.has_exchangereportres()) {
      mutable_exchangereportres()->::aesm::message::Response_ExchangeReportResponse::MergeFrom(from.exchangereportres());
    }
    if (from.has_closesessionres()) {
      mutable_closesessionres()->::aesm::message::Response_CloseSessionResponse::MergeFrom(from.closesessionres());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getpscapres()) {
      mutable_getpscapres()->::aesm::message::Response_GetPsCapResponse::MergeFrom(from.getpscapres());
    }
    if (from.has_getwhitelistsizeres()) {
      mutable_getwhitelistsizeres()->::aesm::message::Response_GetWhiteListSizeResponse::MergeFrom(from.getwhitelistsizeres());
    }
    if (from.has_getwhitelistres()) {
      mutable_getwhitelistres()->::aesm::message::Response_GetWhiteListResponse::MergeFrom(from.getwhitelistres());
    }
    if (from.has_sgxgetextendedepidgroupidres()) {
      mutable_sgxgetextendedepidgroupidres()->::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(from.sgxgetextendedepidgroupidres());
    }
    if (from.has_sgxswitchextendedepidgroupres()) {
      mutable_sgxswitchextendedepidgroupres()->::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(from.sgxswitchextendedepidgroupres());
    }
    if (from.has_sgxregisterres()) {
      mutable_sgxregisterres()->::aesm::message::Response_SGXRegisterResponse::MergeFrom(from.sgxregisterres());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesm.message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  if (has_initquoteres()) {
    if (!this->initquoteres_->IsInitialized()) return false;
  }
  if (has_getquoteres()) {
    if (!this->getquoteres_->IsInitialized()) return false;
  }
  if (has_getlictokenres()) {
    if (!this->getlictokenres_->IsInitialized()) return false;
  }
  if (has_reporterrres()) {
    if (!this->reporterrres_->IsInitialized()) return false;
  }
  if (has_createsessionres()) {
    if (!this->createsessionres_->IsInitialized()) return false;
  }
  if (has_invokeserviceres()) {
    if (!this->invokeserviceres_->IsInitialized()) return false;
  }
  if (has_exchangereportres()) {
    if (!this->exchangereportres_->IsInitialized()) return false;
  }
  if (has_closesessionres()) {
    if (!this->closesessionres_->IsInitialized()) return false;
  }
  if (has_getpscapres()) {
    if (!this->getpscapres_->IsInitialized()) return false;
  }
  if (has_getwhitelistsizeres()) {
    if (!this->getwhitelistsizeres_->IsInitialized()) return false;
  }
  if (has_getwhitelistres()) {
    if (!this->getwhitelistres_->IsInitialized()) return false;
  }
  if (has_sgxgetextendedepidgroupidres()) {
    if (!this->sgxgetextendedepidgroupidres_->IsInitialized()) return false;
  }
  if (has_sgxswitchextendedepidgroupres()) {
    if (!this->sgxswitchextendedepidgroupres_->IsInitialized()) return false;
  }
  if (has_sgxregisterres()) {
    if (!this->sgxregisterres_->IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(initquoteres_, other->initquoteres_);
  std::swap(getquoteres_, other->getquoteres_);
  std::swap(getlictokenres_, other->getlictokenres_);
  std::swap(reporterrres_, other->reporterrres_);
  std::swap(createsessionres_, other->createsessionres_);
  std::swap(invokeserviceres_, other->invokeserviceres_);
  std::swap(exchangereportres_, other->exchangereportres_);
  std::swap(closesessionres_, other->closesessionres_);
  std::swap(getpscapres_, other->getpscapres_);
  std::swap(getwhitelistsizeres_, other->getwhitelistsizeres_);
  std::swap(getwhitelistres_, other->getwhitelistres_);
  std::swap(sgxgetextendedepidgroupidres_, other->sgxgetextendedepidgroupidres_);
  std::swap(sgxswitchextendedepidgroupres_, other->sgxswitchextendedepidgroupres_);
  std::swap(sgxregisterres_, other->sgxregisterres_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_InitQuoteResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_InitQuoteResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_InitQuoteResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_InitQuoteResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_InitQuoteResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_InitQuoteResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteResponse.errorCode)
  return errorcode_;
}
 void Response_InitQuoteResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteResponse.errorCode)
}

// optional bytes targetInfo = 2;
bool Response_InitQuoteResponse::has_targetinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_InitQuoteResponse::set_has_targetinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_InitQuoteResponse::clear_has_targetinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_InitQuoteResponse::clear_targetinfo() {
  targetinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetinfo();
}
 const ::std::string& Response_InitQuoteResponse::targetinfo() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteResponse.targetInfo)
  return targetinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_InitQuoteResponse::set_targetinfo(const ::std::string& value) {
  set_has_targetinfo();
  targetinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteResponse.targetInfo)
}
 void Response_InitQuoteResponse::set_targetinfo(const char* value) {
  set_has_targetinfo();
  targetinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.InitQuoteResponse.targetInfo)
}
 void Response_InitQuoteResponse::set_targetinfo(const void* value, size_t size) {
  set_has_targetinfo();
  targetinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.InitQuoteResponse.targetInfo)
}
 ::std::string* Response_InitQuoteResponse::mutable_targetinfo() {
  set_has_targetinfo();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.InitQuoteResponse.targetInfo)
  return targetinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_InitQuoteResponse::release_targetinfo() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.InitQuoteResponse.targetInfo)
  clear_has_targetinfo();
  return targetinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_InitQuoteResponse::set_allocated_targetinfo(::std::string* targetinfo) {
  if (targetinfo != NULL) {
    set_has_targetinfo();
  } else {
    clear_has_targetinfo();
  }
  targetinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetinfo);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.InitQuoteResponse.targetInfo)
}

// optional bytes gid = 3;
bool Response_InitQuoteResponse::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response_InitQuoteResponse::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
void Response_InitQuoteResponse::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response_InitQuoteResponse::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
 const ::std::string& Response_InitQuoteResponse::gid() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InitQuoteResponse.gid)
  return gid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_InitQuoteResponse::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InitQuoteResponse.gid)
}
 void Response_InitQuoteResponse::set_gid(const char* value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.InitQuoteResponse.gid)
}
 void Response_InitQuoteResponse::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.InitQuoteResponse.gid)
}
 ::std::string* Response_InitQuoteResponse::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.InitQuoteResponse.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_InitQuoteResponse::release_gid() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.InitQuoteResponse.gid)
  clear_has_gid();
  return gid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_InitQuoteResponse::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.InitQuoteResponse.gid)
}

// -------------------------------------------------------------------

// Response_GetQuoteResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_GetQuoteResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_GetQuoteResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_GetQuoteResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_GetQuoteResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_GetQuoteResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteResponse.errorCode)
  return errorcode_;
}
 void Response_GetQuoteResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteResponse.errorCode)
}

// optional bytes quote = 2;
bool Response_GetQuoteResponse::has_quote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_GetQuoteResponse::set_has_quote() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_GetQuoteResponse::clear_has_quote() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_GetQuoteResponse::clear_quote() {
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quote();
}
 const ::std::string& Response_GetQuoteResponse::quote() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteResponse.quote)
  return quote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetQuoteResponse::set_quote(const ::std::string& value) {
  set_has_quote();
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteResponse.quote)
}
 void Response_GetQuoteResponse::set_quote(const char* value) {
  set_has_quote();
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetQuoteResponse.quote)
}
 void Response_GetQuoteResponse::set_quote(const void* value, size_t size) {
  set_has_quote();
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetQuoteResponse.quote)
}
 ::std::string* Response_GetQuoteResponse::mutable_quote() {
  set_has_quote();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetQuoteResponse.quote)
  return quote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_GetQuoteResponse::release_quote() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetQuoteResponse.quote)
  clear_has_quote();
  return quote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetQuoteResponse::set_allocated_quote(::std::string* quote) {
  if (quote != NULL) {
    set_has_quote();
  } else {
    clear_has_quote();
  }
  quote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetQuoteResponse.quote)
}

// optional bytes qe_report = 3;
bool Response_GetQuoteResponse::has_qe_report() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response_GetQuoteResponse::set_has_qe_report() {
  _has_bits_[0] |= 0x00000004u;
}
void Response_GetQuoteResponse::clear_has_qe_report() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response_GetQuoteResponse::clear_qe_report() {
  qe_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qe_report();
}
 const ::std::string& Response_GetQuoteResponse::qe_report() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetQuoteResponse.qe_report)
  return qe_report_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetQuoteResponse::set_qe_report(const ::std::string& value) {
  set_has_qe_report();
  qe_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetQuoteResponse.qe_report)
}
 void Response_GetQuoteResponse::set_qe_report(const char* value) {
  set_has_qe_report();
  qe_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetQuoteResponse.qe_report)
}
 void Response_GetQuoteResponse::set_qe_report(const void* value, size_t size) {
  set_has_qe_report();
  qe_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetQuoteResponse.qe_report)
}
 ::std::string* Response_GetQuoteResponse::mutable_qe_report() {
  set_has_qe_report();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetQuoteResponse.qe_report)
  return qe_report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_GetQuoteResponse::release_qe_report() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetQuoteResponse.qe_report)
  clear_has_qe_report();
  return qe_report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetQuoteResponse::set_allocated_qe_report(::std::string* qe_report) {
  if (qe_report != NULL) {
    set_has_qe_report();
  } else {
    clear_has_qe_report();
  }
  qe_report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qe_report);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetQuoteResponse.qe_report)
}

// -------------------------------------------------------------------

// Response_GetLaunchTokenResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_GetLaunchTokenResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_GetLaunchTokenResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_GetLaunchTokenResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_GetLaunchTokenResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_GetLaunchTokenResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetLaunchTokenResponse.errorCode)
  return errorcode_;
}
 void Response_GetLaunchTokenResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetLaunchTokenResponse.errorCode)
}

// optional bytes token = 2;
bool Response_GetLaunchTokenResponse::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_GetLaunchTokenResponse::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_GetLaunchTokenResponse::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_GetLaunchTokenResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& Response_GetLaunchTokenResponse::token() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetLaunchTokenResponse.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetLaunchTokenResponse::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetLaunchTokenResponse.token)
}
 void Response_GetLaunchTokenResponse::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetLaunchTokenResponse.token)
}
 void Response_GetLaunchTokenResponse::set_token(const void* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetLaunchTokenResponse.token)
}
 ::std::string* Response_GetLaunchTokenResponse::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetLaunchTokenResponse.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_GetLaunchTokenResponse::release_token() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetLaunchTokenResponse.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetLaunchTokenResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetLaunchTokenResponse.token)
}

// -------------------------------------------------------------------

// Response_ReportAttestationErrorResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_ReportAttestationErrorResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_ReportAttestationErrorResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_ReportAttestationErrorResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_ReportAttestationErrorResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_ReportAttestationErrorResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.ReportAttestationErrorResponse.errorCode)
  return errorcode_;
}
 void Response_ReportAttestationErrorResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.ReportAttestationErrorResponse.errorCode)
}

// optional bytes platform_update_info = 2;
bool Response_ReportAttestationErrorResponse::has_platform_update_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_ReportAttestationErrorResponse::set_has_platform_update_info() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_ReportAttestationErrorResponse::clear_has_platform_update_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_ReportAttestationErrorResponse::clear_platform_update_info() {
  platform_update_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform_update_info();
}
 const ::std::string& Response_ReportAttestationErrorResponse::platform_update_info() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
  return platform_update_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_ReportAttestationErrorResponse::set_platform_update_info(const ::std::string& value) {
  set_has_platform_update_info();
  platform_update_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
 void Response_ReportAttestationErrorResponse::set_platform_update_info(const char* value) {
  set_has_platform_update_info();
  platform_update_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
 void Response_ReportAttestationErrorResponse::set_platform_update_info(const void* value, size_t size) {
  set_has_platform_update_info();
  platform_update_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}
 ::std::string* Response_ReportAttestationErrorResponse::mutable_platform_update_info() {
  set_has_platform_update_info();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
  return platform_update_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_ReportAttestationErrorResponse::release_platform_update_info() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
  clear_has_platform_update_info();
  return platform_update_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_ReportAttestationErrorResponse::set_allocated_platform_update_info(::std::string* platform_update_info) {
  if (platform_update_info != NULL) {
    set_has_platform_update_info();
  } else {
    clear_has_platform_update_info();
  }
  platform_update_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform_update_info);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.ReportAttestationErrorResponse.platform_update_info)
}

// -------------------------------------------------------------------

// Response_CreateSessionResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_CreateSessionResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_CreateSessionResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_CreateSessionResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_CreateSessionResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_CreateSessionResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.CreateSessionResponse.errorCode)
  return errorcode_;
}
 void Response_CreateSessionResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.CreateSessionResponse.errorCode)
}

// optional uint32 session_id = 2;
bool Response_CreateSessionResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_CreateSessionResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_CreateSessionResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_CreateSessionResponse::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 Response_CreateSessionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.CreateSessionResponse.session_id)
  return session_id_;
}
 void Response_CreateSessionResponse::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.CreateSessionResponse.session_id)
}

// optional bytes se_dh_msg1 = 3;
bool Response_CreateSessionResponse::has_se_dh_msg1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response_CreateSessionResponse::set_has_se_dh_msg1() {
  _has_bits_[0] |= 0x00000004u;
}
void Response_CreateSessionResponse::clear_has_se_dh_msg1() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response_CreateSessionResponse::clear_se_dh_msg1() {
  se_dh_msg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_se_dh_msg1();
}
 const ::std::string& Response_CreateSessionResponse::se_dh_msg1() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.CreateSessionResponse.se_dh_msg1)
  return se_dh_msg1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_CreateSessionResponse::set_se_dh_msg1(const ::std::string& value) {
  set_has_se_dh_msg1();
  se_dh_msg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.CreateSessionResponse.se_dh_msg1)
}
 void Response_CreateSessionResponse::set_se_dh_msg1(const char* value) {
  set_has_se_dh_msg1();
  se_dh_msg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.CreateSessionResponse.se_dh_msg1)
}
 void Response_CreateSessionResponse::set_se_dh_msg1(const void* value, size_t size) {
  set_has_se_dh_msg1();
  se_dh_msg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.CreateSessionResponse.se_dh_msg1)
}
 ::std::string* Response_CreateSessionResponse::mutable_se_dh_msg1() {
  set_has_se_dh_msg1();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.CreateSessionResponse.se_dh_msg1)
  return se_dh_msg1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_CreateSessionResponse::release_se_dh_msg1() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.CreateSessionResponse.se_dh_msg1)
  clear_has_se_dh_msg1();
  return se_dh_msg1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_CreateSessionResponse::set_allocated_se_dh_msg1(::std::string* se_dh_msg1) {
  if (se_dh_msg1 != NULL) {
    set_has_se_dh_msg1();
  } else {
    clear_has_se_dh_msg1();
  }
  se_dh_msg1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_dh_msg1);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.CreateSessionResponse.se_dh_msg1)
}

// -------------------------------------------------------------------

// Response_InvokeServiceResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_InvokeServiceResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_InvokeServiceResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_InvokeServiceResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_InvokeServiceResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_InvokeServiceResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InvokeServiceResponse.errorCode)
  return errorcode_;
}
 void Response_InvokeServiceResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.InvokeServiceResponse.errorCode)
}

// optional bytes pse_message = 2;
bool Response_InvokeServiceResponse::has_pse_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_InvokeServiceResponse::set_has_pse_message() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_InvokeServiceResponse::clear_has_pse_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_InvokeServiceResponse::clear_pse_message() {
  pse_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pse_message();
}
 const ::std::string& Response_InvokeServiceResponse::pse_message() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.InvokeServiceResponse.pse_message)
  return pse_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_InvokeServiceResponse::set_pse_message(const ::std::string& value) {
  set_has_pse_message();
  pse_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.InvokeServiceResponse.pse_message)
}
 void Response_InvokeServiceResponse::set_pse_message(const char* value) {
  set_has_pse_message();
  pse_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.InvokeServiceResponse.pse_message)
}
 void Response_InvokeServiceResponse::set_pse_message(const void* value, size_t size) {
  set_has_pse_message();
  pse_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.InvokeServiceResponse.pse_message)
}
 ::std::string* Response_InvokeServiceResponse::mutable_pse_message() {
  set_has_pse_message();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.InvokeServiceResponse.pse_message)
  return pse_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_InvokeServiceResponse::release_pse_message() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.InvokeServiceResponse.pse_message)
  clear_has_pse_message();
  return pse_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_InvokeServiceResponse::set_allocated_pse_message(::std::string* pse_message) {
  if (pse_message != NULL) {
    set_has_pse_message();
  } else {
    clear_has_pse_message();
  }
  pse_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pse_message);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.InvokeServiceResponse.pse_message)
}

// -------------------------------------------------------------------

// Response_ExchangeReportResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_ExchangeReportResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_ExchangeReportResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_ExchangeReportResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_ExchangeReportResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_ExchangeReportResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.ExchangeReportResponse.errorCode)
  return errorcode_;
}
 void Response_ExchangeReportResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.ExchangeReportResponse.errorCode)
}

// optional bytes se_dh_msg3 = 2;
bool Response_ExchangeReportResponse::has_se_dh_msg3() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_ExchangeReportResponse::set_has_se_dh_msg3() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_ExchangeReportResponse::clear_has_se_dh_msg3() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_ExchangeReportResponse::clear_se_dh_msg3() {
  se_dh_msg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_se_dh_msg3();
}
 const ::std::string& Response_ExchangeReportResponse::se_dh_msg3() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.ExchangeReportResponse.se_dh_msg3)
  return se_dh_msg3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_ExchangeReportResponse::set_se_dh_msg3(const ::std::string& value) {
  set_has_se_dh_msg3();
  se_dh_msg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.ExchangeReportResponse.se_dh_msg3)
}
 void Response_ExchangeReportResponse::set_se_dh_msg3(const char* value) {
  set_has_se_dh_msg3();
  se_dh_msg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.ExchangeReportResponse.se_dh_msg3)
}
 void Response_ExchangeReportResponse::set_se_dh_msg3(const void* value, size_t size) {
  set_has_se_dh_msg3();
  se_dh_msg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.ExchangeReportResponse.se_dh_msg3)
}
 ::std::string* Response_ExchangeReportResponse::mutable_se_dh_msg3() {
  set_has_se_dh_msg3();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.ExchangeReportResponse.se_dh_msg3)
  return se_dh_msg3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_ExchangeReportResponse::release_se_dh_msg3() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.ExchangeReportResponse.se_dh_msg3)
  clear_has_se_dh_msg3();
  return se_dh_msg3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_ExchangeReportResponse::set_allocated_se_dh_msg3(::std::string* se_dh_msg3) {
  if (se_dh_msg3 != NULL) {
    set_has_se_dh_msg3();
  } else {
    clear_has_se_dh_msg3();
  }
  se_dh_msg3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_dh_msg3);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.ExchangeReportResponse.se_dh_msg3)
}

// -------------------------------------------------------------------

// Response_CloseSessionResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_CloseSessionResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_CloseSessionResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_CloseSessionResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_CloseSessionResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_CloseSessionResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.CloseSessionResponse.errorCode)
  return errorcode_;
}
 void Response_CloseSessionResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.CloseSessionResponse.errorCode)
}

// -------------------------------------------------------------------

// Response_GetPsCapResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_GetPsCapResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_GetPsCapResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_GetPsCapResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_GetPsCapResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_GetPsCapResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetPsCapResponse.errorCode)
  return errorcode_;
}
 void Response_GetPsCapResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetPsCapResponse.errorCode)
}

// optional uint64 ps_cap = 2;
bool Response_GetPsCapResponse::has_ps_cap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_GetPsCapResponse::set_has_ps_cap() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_GetPsCapResponse::clear_has_ps_cap() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_GetPsCapResponse::clear_ps_cap() {
  ps_cap_ = GOOGLE_ULONGLONG(0);
  clear_has_ps_cap();
}
 ::google::protobuf::uint64 Response_GetPsCapResponse::ps_cap() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetPsCapResponse.ps_cap)
  return ps_cap_;
}
 void Response_GetPsCapResponse::set_ps_cap(::google::protobuf::uint64 value) {
  set_has_ps_cap();
  ps_cap_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetPsCapResponse.ps_cap)
}

// -------------------------------------------------------------------

// Response_GetWhiteListSizeResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_GetWhiteListSizeResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_GetWhiteListSizeResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_GetWhiteListSizeResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_GetWhiteListSizeResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_GetWhiteListSizeResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListSizeResponse.errorCode)
  return errorcode_;
}
 void Response_GetWhiteListSizeResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListSizeResponse.errorCode)
}

// optional uint32 white_list_size = 2;
bool Response_GetWhiteListSizeResponse::has_white_list_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_GetWhiteListSizeResponse::set_has_white_list_size() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_GetWhiteListSizeResponse::clear_has_white_list_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_GetWhiteListSizeResponse::clear_white_list_size() {
  white_list_size_ = 0u;
  clear_has_white_list_size();
}
 ::google::protobuf::uint32 Response_GetWhiteListSizeResponse::white_list_size() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListSizeResponse.white_list_size)
  return white_list_size_;
}
 void Response_GetWhiteListSizeResponse::set_white_list_size(::google::protobuf::uint32 value) {
  set_has_white_list_size();
  white_list_size_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListSizeResponse.white_list_size)
}

// -------------------------------------------------------------------

// Response_GetWhiteListResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_GetWhiteListResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_GetWhiteListResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_GetWhiteListResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_GetWhiteListResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_GetWhiteListResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListResponse.errorCode)
  return errorcode_;
}
 void Response_GetWhiteListResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListResponse.errorCode)
}

// optional bytes white_list = 2;
bool Response_GetWhiteListResponse::has_white_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_GetWhiteListResponse::set_has_white_list() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_GetWhiteListResponse::clear_has_white_list() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_GetWhiteListResponse::clear_white_list() {
  white_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_white_list();
}
 const ::std::string& Response_GetWhiteListResponse::white_list() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.GetWhiteListResponse.white_list)
  return white_list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetWhiteListResponse::set_white_list(const ::std::string& value) {
  set_has_white_list();
  white_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesm.message.Response.GetWhiteListResponse.white_list)
}
 void Response_GetWhiteListResponse::set_white_list(const char* value) {
  set_has_white_list();
  white_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesm.message.Response.GetWhiteListResponse.white_list)
}
 void Response_GetWhiteListResponse::set_white_list(const void* value, size_t size) {
  set_has_white_list();
  white_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesm.message.Response.GetWhiteListResponse.white_list)
}
 ::std::string* Response_GetWhiteListResponse::mutable_white_list() {
  set_has_white_list();
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.GetWhiteListResponse.white_list)
  return white_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_GetWhiteListResponse::release_white_list() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.GetWhiteListResponse.white_list)
  clear_has_white_list();
  return white_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_GetWhiteListResponse::set_allocated_white_list(::std::string* white_list) {
  if (white_list != NULL) {
    set_has_white_list();
  } else {
    clear_has_white_list();
  }
  white_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), white_list);
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.GetWhiteListResponse.white_list)
}

// -------------------------------------------------------------------

// Response_SGXGetExtendedEpidGroupIdResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_SGXGetExtendedEpidGroupIdResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_SGXGetExtendedEpidGroupIdResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_SGXGetExtendedEpidGroupIdResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_SGXGetExtendedEpidGroupIdResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_SGXGetExtendedEpidGroupIdResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.errorCode)
  return errorcode_;
}
 void Response_SGXGetExtendedEpidGroupIdResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.errorCode)
}

// optional uint32 x_group_id = 2;
bool Response_SGXGetExtendedEpidGroupIdResponse::has_x_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response_SGXGetExtendedEpidGroupIdResponse::set_has_x_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Response_SGXGetExtendedEpidGroupIdResponse::clear_has_x_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response_SGXGetExtendedEpidGroupIdResponse::clear_x_group_id() {
  x_group_id_ = 0u;
  clear_has_x_group_id();
}
 ::google::protobuf::uint32 Response_SGXGetExtendedEpidGroupIdResponse::x_group_id() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.x_group_id)
  return x_group_id_;
}
 void Response_SGXGetExtendedEpidGroupIdResponse::set_x_group_id(::google::protobuf::uint32 value) {
  set_has_x_group_id();
  x_group_id_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse.x_group_id)
}

// -------------------------------------------------------------------

// Response_SGXSwitchExtendedEpidGroupResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_SGXSwitchExtendedEpidGroupResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_SGXSwitchExtendedEpidGroupResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_SGXSwitchExtendedEpidGroupResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_SGXSwitchExtendedEpidGroupResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_SGXSwitchExtendedEpidGroupResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse.errorCode)
  return errorcode_;
}
 void Response_SGXSwitchExtendedEpidGroupResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse.errorCode)
}

// -------------------------------------------------------------------

// Response_SGXRegisterResponse

// required uint32 errorCode = 1 [default = 1];
bool Response_SGXRegisterResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response_SGXRegisterResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Response_SGXRegisterResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response_SGXRegisterResponse::clear_errorcode() {
  errorcode_ = 1u;
  clear_has_errorcode();
}
 ::google::protobuf::uint32 Response_SGXRegisterResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.SGXRegisterResponse.errorCode)
  return errorcode_;
}
 void Response_SGXRegisterResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:aesm.message.Response.SGXRegisterResponse.errorCode)
}

// -------------------------------------------------------------------

// Response

// optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
bool Response::has_initquoteres() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_initquoteres() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_initquoteres() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_initquoteres() {
  if (initquoteres_ != NULL) initquoteres_->::aesm::message::Response_InitQuoteResponse::Clear();
  clear_has_initquoteres();
}
const ::aesm::message::Response_InitQuoteResponse& Response::initquoteres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.initQuoteRes)
  return initquoteres_ != NULL ? *initquoteres_ : *default_instance_->initquoteres_;
}
::aesm::message::Response_InitQuoteResponse* Response::mutable_initquoteres() {
  set_has_initquoteres();
  if (initquoteres_ == NULL) {
    initquoteres_ = new ::aesm::message::Response_InitQuoteResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.initQuoteRes)
  return initquoteres_;
}
::aesm::message::Response_InitQuoteResponse* Response::release_initquoteres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.initQuoteRes)
  clear_has_initquoteres();
  ::aesm::message::Response_InitQuoteResponse* temp = initquoteres_;
  initquoteres_ = NULL;
  return temp;
}
void Response::set_allocated_initquoteres(::aesm::message::Response_InitQuoteResponse* initquoteres) {
  delete initquoteres_;
  initquoteres_ = initquoteres;
  if (initquoteres) {
    set_has_initquoteres();
  } else {
    clear_has_initquoteres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.initQuoteRes)
}

// optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
bool Response::has_getquoteres() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_getquoteres() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_getquoteres() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_getquoteres() {
  if (getquoteres_ != NULL) getquoteres_->::aesm::message::Response_GetQuoteResponse::Clear();
  clear_has_getquoteres();
}
const ::aesm::message::Response_GetQuoteResponse& Response::getquoteres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getQuoteRes)
  return getquoteres_ != NULL ? *getquoteres_ : *default_instance_->getquoteres_;
}
::aesm::message::Response_GetQuoteResponse* Response::mutable_getquoteres() {
  set_has_getquoteres();
  if (getquoteres_ == NULL) {
    getquoteres_ = new ::aesm::message::Response_GetQuoteResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getQuoteRes)
  return getquoteres_;
}
::aesm::message::Response_GetQuoteResponse* Response::release_getquoteres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getQuoteRes)
  clear_has_getquoteres();
  ::aesm::message::Response_GetQuoteResponse* temp = getquoteres_;
  getquoteres_ = NULL;
  return temp;
}
void Response::set_allocated_getquoteres(::aesm::message::Response_GetQuoteResponse* getquoteres) {
  delete getquoteres_;
  getquoteres_ = getquoteres;
  if (getquoteres) {
    set_has_getquoteres();
  } else {
    clear_has_getquoteres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getQuoteRes)
}

// optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
bool Response::has_getlictokenres() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_getlictokenres() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_getlictokenres() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_getlictokenres() {
  if (getlictokenres_ != NULL) getlictokenres_->::aesm::message::Response_GetLaunchTokenResponse::Clear();
  clear_has_getlictokenres();
}
const ::aesm::message::Response_GetLaunchTokenResponse& Response::getlictokenres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getLicTokenRes)
  return getlictokenres_ != NULL ? *getlictokenres_ : *default_instance_->getlictokenres_;
}
::aesm::message::Response_GetLaunchTokenResponse* Response::mutable_getlictokenres() {
  set_has_getlictokenres();
  if (getlictokenres_ == NULL) {
    getlictokenres_ = new ::aesm::message::Response_GetLaunchTokenResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getLicTokenRes)
  return getlictokenres_;
}
::aesm::message::Response_GetLaunchTokenResponse* Response::release_getlictokenres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getLicTokenRes)
  clear_has_getlictokenres();
  ::aesm::message::Response_GetLaunchTokenResponse* temp = getlictokenres_;
  getlictokenres_ = NULL;
  return temp;
}
void Response::set_allocated_getlictokenres(::aesm::message::Response_GetLaunchTokenResponse* getlictokenres) {
  delete getlictokenres_;
  getlictokenres_ = getlictokenres;
  if (getlictokenres) {
    set_has_getlictokenres();
  } else {
    clear_has_getlictokenres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getLicTokenRes)
}

// optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
bool Response::has_reporterrres() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_reporterrres() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_reporterrres() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_reporterrres() {
  if (reporterrres_ != NULL) reporterrres_->::aesm::message::Response_ReportAttestationErrorResponse::Clear();
  clear_has_reporterrres();
}
const ::aesm::message::Response_ReportAttestationErrorResponse& Response::reporterrres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.reportErrRes)
  return reporterrres_ != NULL ? *reporterrres_ : *default_instance_->reporterrres_;
}
::aesm::message::Response_ReportAttestationErrorResponse* Response::mutable_reporterrres() {
  set_has_reporterrres();
  if (reporterrres_ == NULL) {
    reporterrres_ = new ::aesm::message::Response_ReportAttestationErrorResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.reportErrRes)
  return reporterrres_;
}
::aesm::message::Response_ReportAttestationErrorResponse* Response::release_reporterrres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.reportErrRes)
  clear_has_reporterrres();
  ::aesm::message::Response_ReportAttestationErrorResponse* temp = reporterrres_;
  reporterrres_ = NULL;
  return temp;
}
void Response::set_allocated_reporterrres(::aesm::message::Response_ReportAttestationErrorResponse* reporterrres) {
  delete reporterrres_;
  reporterrres_ = reporterrres;
  if (reporterrres) {
    set_has_reporterrres();
  } else {
    clear_has_reporterrres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.reportErrRes)
}

// optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
bool Response::has_createsessionres() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Response::set_has_createsessionres() {
  _has_bits_[0] |= 0x00000010u;
}
void Response::clear_has_createsessionres() {
  _has_bits_[0] &= ~0x00000010u;
}
void Response::clear_createsessionres() {
  if (createsessionres_ != NULL) createsessionres_->::aesm::message::Response_CreateSessionResponse::Clear();
  clear_has_createsessionres();
}
const ::aesm::message::Response_CreateSessionResponse& Response::createsessionres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.createSessionRes)
  return createsessionres_ != NULL ? *createsessionres_ : *default_instance_->createsessionres_;
}
::aesm::message::Response_CreateSessionResponse* Response::mutable_createsessionres() {
  set_has_createsessionres();
  if (createsessionres_ == NULL) {
    createsessionres_ = new ::aesm::message::Response_CreateSessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.createSessionRes)
  return createsessionres_;
}
::aesm::message::Response_CreateSessionResponse* Response::release_createsessionres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.createSessionRes)
  clear_has_createsessionres();
  ::aesm::message::Response_CreateSessionResponse* temp = createsessionres_;
  createsessionres_ = NULL;
  return temp;
}
void Response::set_allocated_createsessionres(::aesm::message::Response_CreateSessionResponse* createsessionres) {
  delete createsessionres_;
  createsessionres_ = createsessionres;
  if (createsessionres) {
    set_has_createsessionres();
  } else {
    clear_has_createsessionres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.createSessionRes)
}

// optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
bool Response::has_invokeserviceres() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Response::set_has_invokeserviceres() {
  _has_bits_[0] |= 0x00000020u;
}
void Response::clear_has_invokeserviceres() {
  _has_bits_[0] &= ~0x00000020u;
}
void Response::clear_invokeserviceres() {
  if (invokeserviceres_ != NULL) invokeserviceres_->::aesm::message::Response_InvokeServiceResponse::Clear();
  clear_has_invokeserviceres();
}
const ::aesm::message::Response_InvokeServiceResponse& Response::invokeserviceres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.invokeServiceRes)
  return invokeserviceres_ != NULL ? *invokeserviceres_ : *default_instance_->invokeserviceres_;
}
::aesm::message::Response_InvokeServiceResponse* Response::mutable_invokeserviceres() {
  set_has_invokeserviceres();
  if (invokeserviceres_ == NULL) {
    invokeserviceres_ = new ::aesm::message::Response_InvokeServiceResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.invokeServiceRes)
  return invokeserviceres_;
}
::aesm::message::Response_InvokeServiceResponse* Response::release_invokeserviceres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.invokeServiceRes)
  clear_has_invokeserviceres();
  ::aesm::message::Response_InvokeServiceResponse* temp = invokeserviceres_;
  invokeserviceres_ = NULL;
  return temp;
}
void Response::set_allocated_invokeserviceres(::aesm::message::Response_InvokeServiceResponse* invokeserviceres) {
  delete invokeserviceres_;
  invokeserviceres_ = invokeserviceres;
  if (invokeserviceres) {
    set_has_invokeserviceres();
  } else {
    clear_has_invokeserviceres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.invokeServiceRes)
}

// optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
bool Response::has_exchangereportres() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Response::set_has_exchangereportres() {
  _has_bits_[0] |= 0x00000040u;
}
void Response::clear_has_exchangereportres() {
  _has_bits_[0] &= ~0x00000040u;
}
void Response::clear_exchangereportres() {
  if (exchangereportres_ != NULL) exchangereportres_->::aesm::message::Response_ExchangeReportResponse::Clear();
  clear_has_exchangereportres();
}
const ::aesm::message::Response_ExchangeReportResponse& Response::exchangereportres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.exchangeReportRes)
  return exchangereportres_ != NULL ? *exchangereportres_ : *default_instance_->exchangereportres_;
}
::aesm::message::Response_ExchangeReportResponse* Response::mutable_exchangereportres() {
  set_has_exchangereportres();
  if (exchangereportres_ == NULL) {
    exchangereportres_ = new ::aesm::message::Response_ExchangeReportResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.exchangeReportRes)
  return exchangereportres_;
}
::aesm::message::Response_ExchangeReportResponse* Response::release_exchangereportres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.exchangeReportRes)
  clear_has_exchangereportres();
  ::aesm::message::Response_ExchangeReportResponse* temp = exchangereportres_;
  exchangereportres_ = NULL;
  return temp;
}
void Response::set_allocated_exchangereportres(::aesm::message::Response_ExchangeReportResponse* exchangereportres) {
  delete exchangereportres_;
  exchangereportres_ = exchangereportres;
  if (exchangereportres) {
    set_has_exchangereportres();
  } else {
    clear_has_exchangereportres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.exchangeReportRes)
}

// optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
bool Response::has_closesessionres() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Response::set_has_closesessionres() {
  _has_bits_[0] |= 0x00000080u;
}
void Response::clear_has_closesessionres() {
  _has_bits_[0] &= ~0x00000080u;
}
void Response::clear_closesessionres() {
  if (closesessionres_ != NULL) closesessionres_->::aesm::message::Response_CloseSessionResponse::Clear();
  clear_has_closesessionres();
}
const ::aesm::message::Response_CloseSessionResponse& Response::closesessionres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.closeSessionRes)
  return closesessionres_ != NULL ? *closesessionres_ : *default_instance_->closesessionres_;
}
::aesm::message::Response_CloseSessionResponse* Response::mutable_closesessionres() {
  set_has_closesessionres();
  if (closesessionres_ == NULL) {
    closesessionres_ = new ::aesm::message::Response_CloseSessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.closeSessionRes)
  return closesessionres_;
}
::aesm::message::Response_CloseSessionResponse* Response::release_closesessionres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.closeSessionRes)
  clear_has_closesessionres();
  ::aesm::message::Response_CloseSessionResponse* temp = closesessionres_;
  closesessionres_ = NULL;
  return temp;
}
void Response::set_allocated_closesessionres(::aesm::message::Response_CloseSessionResponse* closesessionres) {
  delete closesessionres_;
  closesessionres_ = closesessionres;
  if (closesessionres) {
    set_has_closesessionres();
  } else {
    clear_has_closesessionres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.closeSessionRes)
}

// optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
bool Response::has_getpscapres() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Response::set_has_getpscapres() {
  _has_bits_[0] |= 0x00000100u;
}
void Response::clear_has_getpscapres() {
  _has_bits_[0] &= ~0x00000100u;
}
void Response::clear_getpscapres() {
  if (getpscapres_ != NULL) getpscapres_->::aesm::message::Response_GetPsCapResponse::Clear();
  clear_has_getpscapres();
}
const ::aesm::message::Response_GetPsCapResponse& Response::getpscapres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getPsCapRes)
  return getpscapres_ != NULL ? *getpscapres_ : *default_instance_->getpscapres_;
}
::aesm::message::Response_GetPsCapResponse* Response::mutable_getpscapres() {
  set_has_getpscapres();
  if (getpscapres_ == NULL) {
    getpscapres_ = new ::aesm::message::Response_GetPsCapResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getPsCapRes)
  return getpscapres_;
}
::aesm::message::Response_GetPsCapResponse* Response::release_getpscapres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getPsCapRes)
  clear_has_getpscapres();
  ::aesm::message::Response_GetPsCapResponse* temp = getpscapres_;
  getpscapres_ = NULL;
  return temp;
}
void Response::set_allocated_getpscapres(::aesm::message::Response_GetPsCapResponse* getpscapres) {
  delete getpscapres_;
  getpscapres_ = getpscapres;
  if (getpscapres) {
    set_has_getpscapres();
  } else {
    clear_has_getpscapres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getPsCapRes)
}

// optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
bool Response::has_getwhitelistsizeres() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Response::set_has_getwhitelistsizeres() {
  _has_bits_[0] |= 0x00000200u;
}
void Response::clear_has_getwhitelistsizeres() {
  _has_bits_[0] &= ~0x00000200u;
}
void Response::clear_getwhitelistsizeres() {
  if (getwhitelistsizeres_ != NULL) getwhitelistsizeres_->::aesm::message::Response_GetWhiteListSizeResponse::Clear();
  clear_has_getwhitelistsizeres();
}
const ::aesm::message::Response_GetWhiteListSizeResponse& Response::getwhitelistsizeres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getWhiteListSizeRes)
  return getwhitelistsizeres_ != NULL ? *getwhitelistsizeres_ : *default_instance_->getwhitelistsizeres_;
}
::aesm::message::Response_GetWhiteListSizeResponse* Response::mutable_getwhitelistsizeres() {
  set_has_getwhitelistsizeres();
  if (getwhitelistsizeres_ == NULL) {
    getwhitelistsizeres_ = new ::aesm::message::Response_GetWhiteListSizeResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getWhiteListSizeRes)
  return getwhitelistsizeres_;
}
::aesm::message::Response_GetWhiteListSizeResponse* Response::release_getwhitelistsizeres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getWhiteListSizeRes)
  clear_has_getwhitelistsizeres();
  ::aesm::message::Response_GetWhiteListSizeResponse* temp = getwhitelistsizeres_;
  getwhitelistsizeres_ = NULL;
  return temp;
}
void Response::set_allocated_getwhitelistsizeres(::aesm::message::Response_GetWhiteListSizeResponse* getwhitelistsizeres) {
  delete getwhitelistsizeres_;
  getwhitelistsizeres_ = getwhitelistsizeres;
  if (getwhitelistsizeres) {
    set_has_getwhitelistsizeres();
  } else {
    clear_has_getwhitelistsizeres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getWhiteListSizeRes)
}

// optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
bool Response::has_getwhitelistres() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Response::set_has_getwhitelistres() {
  _has_bits_[0] |= 0x00000400u;
}
void Response::clear_has_getwhitelistres() {
  _has_bits_[0] &= ~0x00000400u;
}
void Response::clear_getwhitelistres() {
  if (getwhitelistres_ != NULL) getwhitelistres_->::aesm::message::Response_GetWhiteListResponse::Clear();
  clear_has_getwhitelistres();
}
const ::aesm::message::Response_GetWhiteListResponse& Response::getwhitelistres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.getWhiteListRes)
  return getwhitelistres_ != NULL ? *getwhitelistres_ : *default_instance_->getwhitelistres_;
}
::aesm::message::Response_GetWhiteListResponse* Response::mutable_getwhitelistres() {
  set_has_getwhitelistres();
  if (getwhitelistres_ == NULL) {
    getwhitelistres_ = new ::aesm::message::Response_GetWhiteListResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.getWhiteListRes)
  return getwhitelistres_;
}
::aesm::message::Response_GetWhiteListResponse* Response::release_getwhitelistres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.getWhiteListRes)
  clear_has_getwhitelistres();
  ::aesm::message::Response_GetWhiteListResponse* temp = getwhitelistres_;
  getwhitelistres_ = NULL;
  return temp;
}
void Response::set_allocated_getwhitelistres(::aesm::message::Response_GetWhiteListResponse* getwhitelistres) {
  delete getwhitelistres_;
  getwhitelistres_ = getwhitelistres;
  if (getwhitelistres) {
    set_has_getwhitelistres();
  } else {
    clear_has_getwhitelistres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.getWhiteListRes)
}

// optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
bool Response::has_sgxgetextendedepidgroupidres() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Response::set_has_sgxgetextendedepidgroupidres() {
  _has_bits_[0] |= 0x00000800u;
}
void Response::clear_has_sgxgetextendedepidgroupidres() {
  _has_bits_[0] &= ~0x00000800u;
}
void Response::clear_sgxgetextendedepidgroupidres() {
  if (sgxgetextendedepidgroupidres_ != NULL) sgxgetextendedepidgroupidres_->::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::Clear();
  clear_has_sgxgetextendedepidgroupidres();
}
const ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse& Response::sgxgetextendedepidgroupidres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
  return sgxgetextendedepidgroupidres_ != NULL ? *sgxgetextendedepidgroupidres_ : *default_instance_->sgxgetextendedepidgroupidres_;
}
::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Response::mutable_sgxgetextendedepidgroupidres() {
  set_has_sgxgetextendedepidgroupidres();
  if (sgxgetextendedepidgroupidres_ == NULL) {
    sgxgetextendedepidgroupidres_ = new ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
  return sgxgetextendedepidgroupidres_;
}
::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Response::release_sgxgetextendedepidgroupidres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
  clear_has_sgxgetextendedepidgroupidres();
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* temp = sgxgetextendedepidgroupidres_;
  sgxgetextendedepidgroupidres_ = NULL;
  return temp;
}
void Response::set_allocated_sgxgetextendedepidgroupidres(::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* sgxgetextendedepidgroupidres) {
  delete sgxgetextendedepidgroupidres_;
  sgxgetextendedepidgroupidres_ = sgxgetextendedepidgroupidres;
  if (sgxgetextendedepidgroupidres) {
    set_has_sgxgetextendedepidgroupidres();
  } else {
    clear_has_sgxgetextendedepidgroupidres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.sgxGetExtendedEpidGroupIdRes)
}

// optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
bool Response::has_sgxswitchextendedepidgroupres() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Response::set_has_sgxswitchextendedepidgroupres() {
  _has_bits_[0] |= 0x00001000u;
}
void Response::clear_has_sgxswitchextendedepidgroupres() {
  _has_bits_[0] &= ~0x00001000u;
}
void Response::clear_sgxswitchextendedepidgroupres() {
  if (sgxswitchextendedepidgroupres_ != NULL) sgxswitchextendedepidgroupres_->::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::Clear();
  clear_has_sgxswitchextendedepidgroupres();
}
const ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse& Response::sgxswitchextendedepidgroupres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
  return sgxswitchextendedepidgroupres_ != NULL ? *sgxswitchextendedepidgroupres_ : *default_instance_->sgxswitchextendedepidgroupres_;
}
::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Response::mutable_sgxswitchextendedepidgroupres() {
  set_has_sgxswitchextendedepidgroupres();
  if (sgxswitchextendedepidgroupres_ == NULL) {
    sgxswitchextendedepidgroupres_ = new ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
  return sgxswitchextendedepidgroupres_;
}
::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Response::release_sgxswitchextendedepidgroupres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
  clear_has_sgxswitchextendedepidgroupres();
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* temp = sgxswitchextendedepidgroupres_;
  sgxswitchextendedepidgroupres_ = NULL;
  return temp;
}
void Response::set_allocated_sgxswitchextendedepidgroupres(::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* sgxswitchextendedepidgroupres) {
  delete sgxswitchextendedepidgroupres_;
  sgxswitchextendedepidgroupres_ = sgxswitchextendedepidgroupres;
  if (sgxswitchextendedepidgroupres) {
    set_has_sgxswitchextendedepidgroupres();
  } else {
    clear_has_sgxswitchextendedepidgroupres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.sgxSwitchExtendedEpidGroupRes)
}

// optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
bool Response::has_sgxregisterres() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Response::set_has_sgxregisterres() {
  _has_bits_[0] |= 0x00002000u;
}
void Response::clear_has_sgxregisterres() {
  _has_bits_[0] &= ~0x00002000u;
}
void Response::clear_sgxregisterres() {
  if (sgxregisterres_ != NULL) sgxregisterres_->::aesm::message::Response_SGXRegisterResponse::Clear();
  clear_has_sgxregisterres();
}
const ::aesm::message::Response_SGXRegisterResponse& Response::sgxregisterres() const {
  // @@protoc_insertion_point(field_get:aesm.message.Response.sgxRegisterRes)
  return sgxregisterres_ != NULL ? *sgxregisterres_ : *default_instance_->sgxregisterres_;
}
::aesm::message::Response_SGXRegisterResponse* Response::mutable_sgxregisterres() {
  set_has_sgxregisterres();
  if (sgxregisterres_ == NULL) {
    sgxregisterres_ = new ::aesm::message::Response_SGXRegisterResponse;
  }
  // @@protoc_insertion_point(field_mutable:aesm.message.Response.sgxRegisterRes)
  return sgxregisterres_;
}
::aesm::message::Response_SGXRegisterResponse* Response::release_sgxregisterres() {
  // @@protoc_insertion_point(field_release:aesm.message.Response.sgxRegisterRes)
  clear_has_sgxregisterres();
  ::aesm::message::Response_SGXRegisterResponse* temp = sgxregisterres_;
  sgxregisterres_ = NULL;
  return temp;
}
void Response::set_allocated_sgxregisterres(::aesm::message::Response_SGXRegisterResponse* sgxregisterres) {
  delete sgxregisterres_;
  sgxregisterres_ = sgxregisterres;
  if (sgxregisterres) {
    set_has_sgxregisterres();
  } else {
    clear_has_sgxregisterres();
  }
  // @@protoc_insertion_point(field_set_allocated:aesm.message.Response.sgxRegisterRes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace aesm

// @@protoc_insertion_point(global_scope)
